{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, renderList as _renderList, Fragment as _Fragment, normalizeClass as _normalizeClass, vModelText as _vModelText, withDirectives as _withDirectives, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-09ae3d59\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"app-container\"\n};\nconst _hoisted_2 = {\n  class: \"sidebar\"\n};\nconst _hoisted_3 = {\n  class: \"profile-section\"\n};\nconst _hoisted_4 = [\"src\"];\nconst _hoisted_5 = {\n  class: \"add-friend-section\"\n};\nconst _hoisted_6 = {\n  key: 1\n};\nconst _hoisted_7 = {\n  key: 3\n};\nconst _hoisted_8 = {\n  class: \"friends-list-section\"\n};\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"Amigos\", -1 /* HOISTED */));\nconst _hoisted_10 = [\"src\"];\nconst _hoisted_11 = {\n  class: \"content\"\n};\nconst _hoisted_12 = {\n  class: \"carousel-container\"\n};\nconst _hoisted_13 = {\n  class: \"photo-container\"\n};\nconst _hoisted_14 = [\"src\"];\nconst _hoisted_15 = {\n  key: 1,\n  class: \"photo-description\"\n};\nconst _hoisted_16 = {\n  key: 2,\n  class: \"reaction-counts\"\n};\nconst _hoisted_17 = {\n  class: \"photo-actions\"\n};\nconst _hoisted_18 = {\n  key: 0,\n  class: \"reactions-list\"\n};\nconst _hoisted_19 = [\"onClick\"];\nconst _hoisted_20 = {\n  key: 1,\n  class: \"user-reaction\"\n};\nconst _hoisted_21 = {\n  key: 2,\n  class: \"add-comment\"\n};\nconst _hoisted_22 = {\n  key: 0,\n  class: \"comments-section\"\n};\nconst _hoisted_23 = {\n  class: \"comment-user-info\"\n};\nconst _hoisted_24 = [\"src\"];\nconst _hoisted_25 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_app_header = _resolveComponent(\"app-header\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", null, [_createVNode(_component_app_header)]), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"aside\", _hoisted_2, [_createCommentVNode(\" Foto do perfil e nome \"), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"img\", {\n    src: $data.usuario?.fotoPerfil ? $options.getAbsolutePath($data.usuario.fotoPerfil) : $data.defaultAvatar,\n    alt: \"\",\n    class: \"profile-picture\"\n  }, null, 8 /* PROPS */, _hoisted_4), _createElementVNode(\"h2\", null, _toDisplayString($data.usuario?.nome || 'Usuário Não Encontrado'), 1 /* TEXT */)]), _createCommentVNode(\" Seção de Adicionar Amigo \"), _createElementVNode(\"div\", _hoisted_5, [$data.estadoAmizade === 'nenhum' ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    type: \"button\",\n    class: \"btn btn-success btn-lg\",\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.enviarPedidoAmizade && $options.enviarPedidoAmizade(...args))\n  }, \" Adicionar Amigo \")) : $data.estadoAmizade === 'pendente' ? (_openBlock(), _createElementBlock(\"p\", _hoisted_6, \" Pedido pendente \")) : _createCommentVNode(\"v-if\", true), $data.estadoAmizade === 'pendente' ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 2,\n    type: \"button\",\n    class: \"btn btn-warning btn-lg\",\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.cancelarPedidoAmizade && $options.cancelarPedidoAmizade(...args))\n  }, \" Cancelar Pedido \")) : $data.estadoAmizade === 'amigos' ? (_openBlock(), _createElementBlock(\"p\", _hoisted_7, \" Amigos 🤝 \")) : _createCommentVNode(\"v-if\", true), $data.estadoAmizade === 'amigos' ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 4,\n    type: \"button\",\n    class: \"btn btn-danger btn-lg\",\n    onClick: _cache[2] || (_cache[2] = (...args) => $options.eliminarAmizade && $options.eliminarAmizade(...args))\n  }, \" Eliminar Amigo \")) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_8, [_hoisted_9, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.amigos, amigo => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: amigo._id\n    }, [_createElementVNode(\"img\", {\n      src: amigo.fotoPerfil ? $options.getAbsolutePath(amigo.fotoPerfil) : $data.defaultAvatar,\n      class: \"friend-picture\"\n    }, null, 8 /* PROPS */, _hoisted_10), _createElementVNode(\"span\", null, _toDisplayString(amigo.nome), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])]), _createElementVNode(\"main\", _hoisted_11, [_createElementVNode(\"div\", _hoisted_12, [$data.allPhotos.length > 1 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    class: \"carousel-control left\",\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.prevPhoto && $options.prevPhoto(...args))\n  }, \"<\")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_13, [$data.allPhotos[$data.currentPhotoIndex] ? (_openBlock(), _createElementBlock(\"img\", {\n    key: 0,\n    src: $options.getAbsolutePath($data.allPhotos[$data.currentPhotoIndex].imagePath),\n    alt: \"User Photo\",\n    class: \"photo\"\n  }, null, 8 /* PROPS */, _hoisted_14)) : _createCommentVNode(\"v-if\", true), $data.allPhotos[$data.currentPhotoIndex] ? (_openBlock(), _createElementBlock(\"div\", _hoisted_15, _toDisplayString($data.allPhotos[$data.currentPhotoIndex].descricao), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), $data.allPhotos[$data.currentPhotoIndex]?.reactionCounts ? (_openBlock(), _createElementBlock(\"div\", _hoisted_16, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.allPhotos[$data.currentPhotoIndex].reactionCounts, reaction => {\n    return _openBlock(), _createElementBlock(\"span\", {\n      key: reaction._id\n    }, _toDisplayString($options.convertEmoji(reaction._id)) + \": \" + _toDisplayString(reaction.count), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_17, [_createElementVNode(\"button\", {\n    class: \"reaction-button\",\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.toggleReactions && $options.toggleReactions(...args))\n  }, \"Reagir\"), $data.showReactions ? (_openBlock(), _createElementBlock(\"div\", _hoisted_18, [_createElementVNode(\"span\", {\n    onClick: _cache[5] || (_cache[5] = $event => $options.handleReaction('like'))\n  }, \"👍\"), _createElementVNode(\"span\", {\n    onClick: _cache[6] || (_cache[6] = $event => $options.handleReaction('heart'))\n  }, \"❤️\"), _createElementVNode(\"span\", {\n    onClick: _cache[7] || (_cache[7] = $event => $options.handleReaction('laugh'))\n  }, \"😂\"), _createElementVNode(\"span\", {\n    onClick: _cache[8] || (_cache[8] = $event => $options.handleReaction('happy'))\n  }, \"😊\"), _createCommentVNode(\" Adicione mais emojis conforme necessário \")])) : _createCommentVNode(\"v-if\", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.emojis, emoji => {\n    return _openBlock(), _createElementBlock(\"span\", {\n      key: emoji.type,\n      class: _normalizeClass({\n        active: $data.userReaction === emoji.type\n      }),\n      onClick: $event => $options.handleReaction(emoji.type)\n    }, _toDisplayString(emoji.char), 11 /* TEXT, CLASS, PROPS */, _hoisted_19);\n  }), 128 /* KEYED_FRAGMENT */)), $data.userReaction && !$data.showReactions ? (_openBlock(), _createElementBlock(\"div\", _hoisted_20, _toDisplayString($options.convertEmoji($data.userReaction)), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"button\", {\n    class: \"comment-button\",\n    onClick: _cache[9] || (_cache[9] = (...args) => $options.toggleCommentBox && $options.toggleCommentBox(...args))\n  }, \"Comentar\"), $data.showCommentBox ? (_openBlock(), _createElementBlock(\"div\", _hoisted_21, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[10] || (_cache[10] = $event => $data.newComment = $event),\n    placeholder: \"Adicione um comentário...\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newComment]]), _createElementVNode(\"button\", {\n    onClick: _cache[11] || (_cache[11] = (...args) => $options.postComment && $options.postComment(...args))\n  }, \"Enviar\")])) : _createCommentVNode(\"v-if\", true)])]), $data.allPhotos.length > 1 ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 1,\n    class: \"carousel-control right\",\n    onClick: _cache[12] || (_cache[12] = (...args) => $options.nextPhoto && $options.nextPhoto(...args))\n  }, \">\")) : _createCommentVNode(\"v-if\", true)]), $data.currentPhotoComments.length > 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_22, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.currentPhotoComments, comment => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"comment\",\n      key: comment._id\n    }, [_createElementVNode(\"div\", _hoisted_23, [_createElementVNode(\"img\", {\n      src: comment.userPhoto || $data.defaultAvatar,\n      alt: \"\",\n      class: \"comment-user-picture\"\n    }, null, 8 /* PROPS */, _hoisted_24), _createElementVNode(\"span\", null, _toDisplayString(comment.userName), 1 /* TEXT */), comment.userId === $data.utilizador._id ? (_openBlock(), _createElementBlock(\"button\", {\n      key: 0,\n      style: {\n        \"border\": \"none\"\n      },\n      onClick: $event => $options.deleteComment(comment._id)\n    }, \"🗑️\", 8 /* PROPS */, _hoisted_25)) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"p\", null, _toDisplayString(comment.descricao), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true)])])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementVNode","_createVNode","_component_app_header","_hoisted_1","_hoisted_2","_createCommentVNode","_hoisted_3","src","$data","usuario","fotoPerfil","$options","getAbsolutePath","defaultAvatar","alt","_toDisplayString","nome","_hoisted_5","estadoAmizade","_createElementBlock","type","onClick","_cache","args","enviarPedidoAmizade","_hoisted_6","cancelarPedidoAmizade","_hoisted_7","eliminarAmizade","_hoisted_8","_hoisted_9","_Fragment","_renderList","amigos","amigo","key","_id","_hoisted_11","_hoisted_12","allPhotos","length","prevPhoto","_hoisted_13","currentPhotoIndex","imagePath","_hoisted_15","descricao","reactionCounts","_hoisted_16","reaction","convertEmoji","count","_hoisted_17","toggleReactions","showReactions","_hoisted_18","$event","handleReaction","emojis","emoji","_normalizeClass","active","userReaction","char","_hoisted_19","_hoisted_20","toggleCommentBox","showCommentBox","_hoisted_21","newComment","placeholder","postComment","nextPhoto","currentPhotoComments","_hoisted_22","comment","_hoisted_23","userPhoto","userName","userId","utilizador","style","deleteComment","_hoisted_25"],"sources":["C:\\Users\\bruno\\OneDrive\\Escritorio\\PWA\\G6_23-24\\VacayMoments\\vacaymoments\\src\\views\\PaginaUtilizador.vue"],"sourcesContent":["\r\n<template>\r\n    <div>\r\n    <app-header></app-header>\r\n</div>\r\n  <div class=\"app-container\">\r\n    <aside class=\"sidebar\">\r\n  <!-- Foto do perfil e nome -->\r\n  <div class=\"profile-section\">\r\n  <img :src=\"usuario?.fotoPerfil ? getAbsolutePath(usuario.fotoPerfil) : defaultAvatar\" alt=\"\" class=\"profile-picture\">\r\n  <h2>{{ usuario?.nome || 'Usuário Não Encontrado' }}</h2>\r\n</div>\r\n\r\n  <!-- Seção de Adicionar Amigo -->\r\n  <div class=\"add-friend-section\">\r\n  <button v-if=\"estadoAmizade === 'nenhum'\" \r\n          type=\"button\" \r\n          class=\"btn btn-success btn-lg\"\r\n          @click=\"enviarPedidoAmizade\">\r\n    Adicionar Amigo\r\n  </button>\r\n  <p v-else-if=\"estadoAmizade === 'pendente'\">\r\n    Pedido pendente\r\n  </p>\r\n  <button v-if=\"estadoAmizade === 'pendente'\"\r\n          type=\"button\"\r\n          class=\"btn btn-warning btn-lg\"\r\n          @click=\"cancelarPedidoAmizade\">\r\n    Cancelar Pedido\r\n  </button>\r\n  <p v-else-if=\"estadoAmizade === 'amigos'\">\r\n    Amigos 🤝\r\n  </p>\r\n  <button v-if=\"estadoAmizade === 'amigos'\"\r\n          type=\"button\"\r\n          class=\"btn btn-danger btn-lg\"\r\n          @click=\"eliminarAmizade\">\r\n    Eliminar Amigo\r\n  </button>\r\n</div>\r\n<div class=\"friends-list-section\">\r\n  <h3>Amigos</h3>\r\n  <ul>  \r\n    <li v-for=\"amigo in amigos\" :key=\"amigo._id\">\r\n      <img :src=\"amigo.fotoPerfil ? getAbsolutePath(amigo.fotoPerfil) : defaultAvatar\" class=\"friend-picture\">\r\n      <span>{{ amigo.nome }}</span>\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\n</aside>\r\n    \r\n  <main class=\"content\">\r\n    <div class=\"carousel-container\">\r\n      <button v-if=\"allPhotos.length > 1\" class=\"carousel-control left\" @click=\"prevPhoto\">&lt;</button>\r\n      <div class=\"photo-container\">\r\n        <img v-if=\"allPhotos[currentPhotoIndex]\" :src=\"getAbsolutePath(allPhotos[currentPhotoIndex].imagePath)\" alt=\"User Photo\" class=\"photo\">\r\n        <div v-if=\"allPhotos[currentPhotoIndex]\" class=\"photo-description\">{{ allPhotos[currentPhotoIndex].descricao }}</div>\r\n        <div v-if=\"allPhotos[currentPhotoIndex]?.reactionCounts\" class=\"reaction-counts\">\r\n          <span v-for=\"reaction in allPhotos[currentPhotoIndex].reactionCounts\" :key=\"reaction._id\">\r\n            {{ convertEmoji(reaction._id) }}: {{ reaction.count }}\r\n          </span>\r\n        </div>\r\n        <div class=\"photo-actions\">\r\n          <button class=\"reaction-button\" @click=\"toggleReactions\">Reagir</button>\r\n          <div v-if=\"showReactions \" class=\"reactions-list\">\r\n            <span @click=\"handleReaction('like')\">👍</span>\r\n            <span @click=\"handleReaction('heart')\">❤️</span>\r\n            <span @click=\"handleReaction('laugh')\">😂</span>\r\n            <span @click=\"handleReaction('happy')\">😊</span>\r\n            <!-- Adicione mais emojis conforme necessário -->\r\n          </div>\r\n          <span\r\n            v-for=\"emoji in emojis\"\r\n            :key=\"emoji.type\"\r\n            :class=\"{ active: userReaction === emoji.type }\"\r\n            @click=\"handleReaction(emoji.type)\"\r\n          >{{ emoji.char }}\r\n          </span>\r\n          <div v-if=\"userReaction && !showReactions\" class=\"user-reaction\">\r\n            {{ convertEmoji(userReaction) }}\r\n          </div>\r\n          <button class=\"comment-button\" @click=\"toggleCommentBox\">Comentar</button>\r\n          <div v-if=\"showCommentBox\" class=\"add-comment\">\r\n            <input type=\"text\" v-model=\"newComment\" placeholder=\"Adicione um comentário...\">\r\n            <button @click=\"postComment\">Enviar</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button v-if=\"allPhotos.length > 1\" class=\"carousel-control right\" @click=\"nextPhoto\">&gt;</button>\r\n    </div>\r\n    <div v-if=\"currentPhotoComments.length > 0\" class=\"comments-section\">\r\n      <div class=\"comment\" v-for=\"comment in currentPhotoComments\" :key=\"comment._id\">\r\n        <div class=\"comment-user-info\">\r\n          <img :src=\"comment.userPhoto || defaultAvatar\" alt=\"\" class=\"comment-user-picture\">\r\n          <span>{{ comment.userName }}</span>\r\n          <button style=\"border: none;\" v-if=\"comment.userId === utilizador._id\" @click=\"deleteComment(comment._id)\">🗑️</button>\r\n        </div>\r\n        <p>{{ comment.descricao }}</p>\r\n      </div>\r\n    </div>\r\n  </main>\r\n</div>\r\n</template>\r\n<script>\r\nimport axios from 'axios';\r\nimport defaultAvatar from '@/assets/avatar.png'; // Ajuste o caminho se necessário\r\nimport AppHeader from '@/components/AppHeader.vue';\r\n\r\nexport default {\r\n  components: {\r\n    AppHeader\r\n  },\r\n  data() {\r\n    return {\r\n      usuario: null,\r\n      defaultAvatar,\r\n      emojis: [], // adicione esta linha se \"emojis\" for uma lista que você irá iterar\r\n      estadoAmizade: null, \r\n      utilizador: null, // Deve ser atualizado com os dados do usuário logado\r\n      amigos:[],\r\n      allPhotos: [], // Armazena todas as fotos, excluindo as do usuário logado\r\n      currentPhotoIndex: 0, // Índice da foto atual no carrossel\r\n      showReactions: false, // Estado para controlar a visibilidade das reações\r\n      userReaction: null, // Estado para armazenar a reação do usuário para a foto atual\r\n      newComment: '', // Para armazenar o novo comentário digitado pelo usuário\r\n      showCommentBox: false, // novo estado para controlar a exibição da caixa de comentário\r\n      currentPhotoComments: [], // Armazena os comentários da foto atual  \r\n      reactionCounts: {}, // Inicialize como um objeto vazio ou como necessário\r\n    };\r\n  },\r\n  watch: {\r\n  '$route.params.id': {\r\n    immediate: true,\r\n    async handler(newId, oldId) {\r\n      if (newId !== oldId) {\r\n        await this.fetchUserData();\r\n        await this.fetchAllPhotos();\r\n        await this.fetchAmigos();\r\n      }\r\n    }\r\n  },\r\n  currentPhotoIndex(newIndex, oldIndex) {\r\n    if (newIndex !== oldIndex) {\r\n      const currentPhoto = this.allPhotos[newIndex];\r\n      if (currentPhoto) {\r\n        this.checkUserReaction(currentPhoto._id);\r\n        this.fetchComments(currentPhoto._id); // Adicionar esta linha\r\n        this.fetchReactionCounts(currentPhoto._id);\r\n      }\r\n    }\r\n  }\r\n},\r\n  methods: {  \r\n    eliminarAmizade() {\r\n      // Aqui você pode usar 'amizadeId', que deve ser armazenado quando você verificar o estado da amizade\r\n      if (this.amizadeId && window.confirm(\"Tem certeza que deseja eliminar esta amizade?\")) {\r\n        axios.delete(`/api/amizades/${this.amizadeId}`, {\r\n          headers: {\r\n            'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n          }\r\n        })\r\n        .then(() => {\r\n          alert(\"Amizade eliminada com sucesso!\");\r\n          this.estadoAmizade = 'nenhum';\r\n          this.amizadeId = null; // Resetar o ID da amizade\r\n          // Atualize a lista de amigos aqui se necessário\r\n        })\r\n        .catch(error => {\r\n          console.error('Erro ao eliminar a amizade', error);\r\n          alert(\"Ocorreu um erro ao tentar eliminar a amizade.\");\r\n        });\r\n      }\r\n    },\r\n    async fetchAmigos() {\r\n      console.log(\"chegeqweqe\");\r\n      try {\r\n        const response = await axios.get(`/api/amizades/amigos/${this.usuario._id}`, {\r\n          headers: {\r\n            'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n          }\r\n        });\r\n        this.amigos = response.data; // Supondo que a API retorne uma lista de objetos de amigos\r\n      } catch (error) {\r\n        console.error('Erro ao buscar amigos', error);\r\n      }\r\n    },\r\n\r\n    deleteComment(commentId) {\r\n    // Solicita confirmação do usuário\r\n    if (window.confirm(\"Tem certeza que deseja eliminar o comentário?\")) {\r\n      axios.delete(`/api/comentario/${commentId}`, {\r\n        headers: {\r\n          'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n        }\r\n      })\r\n      .then(() => {\r\n        // Se a promessa for resolvida, informar o usuário do sucesso\r\n        alert(\"Comentário eliminado com sucesso!\");\r\n        // Atualizar os comentários exibidos\r\n        this.fetchComments(this.allPhotos[this.currentPhotoIndex]._id);\r\n      })\r\n      .catch(error => {\r\n        console.error('Erro ao excluir comentário', error);\r\n        // Se ocorrer um erro, informar o usuário\r\n        alert(\"Ocorreu um erro ao tentar eliminar o comentário.\");\r\n      });\r\n    }\r\n  },\r\n  fetchComments(fotoId) {\r\n    axios.get(`/api/comentarios/${fotoId}`, {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n      }\r\n    })\r\n    .then(response => {\r\n      this.currentPhotoComments = response.data || [];\r\n    })\r\n    .catch(error => {\r\n      console.error('Erro ao buscar comentários', error);\r\n    });\r\n  },\r\n  postComment() {\r\n    const photoId = this.allPhotos[this.currentPhotoIndex]._id;\r\n    axios.post('/api/comentarios', {\r\n      descricao: this.newComment,\r\n      fotoID: photoId,\r\n      dataCriacao: new Date()\r\n    }, {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n      }\r\n    })\r\n    .then(() => {\r\n      alert('Comentário adicionado com sucesso!'); // Exibe um alerta de sucesso\r\n      this.newComment = ''; // Limpa o campo de comentário\r\n      this.fetchComments(photoId); // Atualiza a lista de comentários\r\n      this.toggleCommentBox(); // Fecha a caixa de comentário após adicionar um novo\r\n    })\r\n    .catch(error => {\r\n      console.error('Erro ao postar comentário', error);\r\n      // Trate aqui o erro, como mostrar uma mensagem para o usuário\r\n    });\r\n  },\r\n  fetchReactionCounts(fotoId) {\r\n  axios.get(`/api/reacoes/contagem/${fotoId}`)\r\n  .then(response => {\r\n    const photoIndex = this.allPhotos.findIndex(photo => photo._id === fotoId);\r\n    if (photoIndex !== -1) {\r\n      // No Vue 3, você pode simplesmente atribuir o valor\r\n      this.allPhotos[photoIndex].reactionCounts = response.data;\r\n      // Certifique-se de que reactionCounts é reativo, definindo-o no estado do componente\r\n    }\r\n  })\r\n  .catch(error => {\r\n    console.error('Erro ao buscar contagens de reações', error);\r\n  });\r\n},\r\n  convertEmoji(tipoEmoji) {\r\n    const emojiMap = {\r\n      like: '👍',\r\n      heart: '❤️',\r\n      laugh: '😂',\r\n      happy: '😊',\r\n      // ...outros mapeamentos\r\n    };\r\n    return emojiMap[tipoEmoji] || tipoEmoji;\r\n  },\r\n  checkUserReaction(fotoId) {\r\n    axios.get(`/api/reacoes/${fotoId}`, {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n      }\r\n    })\r\n    .then(response => {\r\n      if (response.data && response.data.reacao) {\r\n        this.userReaction = response.data.reacao;\r\n      } else {\r\n        this.userReaction = null;\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Erro ao verificar a reação do usuário', error);\r\n    });\r\n  },\r\n  reagirAFoto(tipoEmoji, fotoID) {\r\n    axios.post('/api/reacoes', {\r\n      tipoEmoji,\r\n      fotoID\r\n    }, {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n      }\r\n    })\r\n    .then(() => {\r\n      // Supondo que você queira armazenar a reação do usuário\r\n      this.userReaction = tipoEmoji;\r\n      // Se você mantiver um registro de todas as reações por foto, você pode atualizar isso também\r\n      let photo = this.allPhotos.find(p => p._id === fotoID);\r\n      if (photo) {\r\n        this.fetchReactionCounts(fotoID);\r\n        if (!photo.reactions) {\r\n          photo.reactions = {};\r\n        }\r\n        // Incrementar o contador de reações para o tipoEmoji\r\n        if (photo.reactions[tipoEmoji]) {\r\n          photo.reactions[tipoEmoji]++;\r\n        } else {\r\n          photo.reactions[tipoEmoji] = 1;\r\n        }\r\n      }\r\n      \r\n      // Atualizar qualquer outro estado ou componentes da interface do usuário conforme necessário\r\n      // Por exemplo, se você tiver um componente de notificação, pode querer mostrar uma mensagem de sucesso\r\n      // this.showNotification('Reação enviada com sucesso!');\r\n\r\n    })\r\n    .catch(error => {\r\n      console.error('Erro ao reagir à foto', error);\r\n      // Tratar erros de interface do usuário, como mostrar uma mensagem de erro\r\n      // this.showNotification('Erro ao enviar reação.');\r\n    });\r\n  },\r\n  toggleReactions() {\r\n    this.showReactions = !this.showReactions;\r\n  },\r\n  toggleCommentBox() {\r\n    this.showCommentBox = !this.showCommentBox;\r\n  },\r\n  handleReaction(reactionType) {\r\n    const photoId = this.allPhotos[this.currentPhotoIndex]._id;\r\n    this.userReaction = reactionType; // Armazena a reação do usuário\r\n    this.reagirAFoto(reactionType, photoId); // Envia a reação para o servidor\r\n    this.showReactions = false; // Esconde a lista de reações\r\n  },\r\n\r\n    getAbsolutePath(relativePath) {\r\n    // Isso garante que o caminho da imagem sempre comece a partir da raiz\r\n    return `${window.location.origin}/${relativePath}`;\r\n  },\r\n    prevPhoto() {\r\n    if (this.currentPhotoIndex === 0) {\r\n      this.currentPhotoIndex = this.allPhotos.length - 1;\r\n    } else {\r\n      this.currentPhotoIndex--;\r\n    }\r\n  },\r\n  nextPhoto() {\r\n    if (this.currentPhotoIndex === this.allPhotos.length - 1) {\r\n      this.currentPhotoIndex = 0;\r\n    } else {\r\n      this.currentPhotoIndex++;\r\n    }\r\n  },\r\n  fetchAllPhotos() {\r\n    const userId = this.$route.params.id;\r\n    axios.get(`/api/fotos/${userId}`, {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n      }\r\n    })\r\n    .then(response => {\r\n    this.allPhotos = response.data;\r\n  })\r\n    .catch(error => {\r\n      console.error('Erro ao recuperar fotos', error);\r\n    });\r\n  },\r\n    fetchUserData() {\r\n    const userId = this.$route.params.id;\r\n\r\n    if (userId) {\r\n      axios.get(`/api/utilizador/${userId}`)\r\n        .then(response => {\r\n          this.usuario = response.data;\r\n          this.verificarEstadoAmizade(response.data._id);\r\n        })\r\n        .catch(error => {\r\n          console.error('Erro ao recuperar os dados do utilizador', error);\r\n        });\r\n    }\r\n  },\r\n  async fetchUserLogado() {\r\n      try {\r\n        const response = await axios.get('/api/me', {\r\n          headers: {\r\n            'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n          }\r\n        });\r\n        this.utilizador = response.data;\r\n        return true; // Indica sucesso\r\n      } catch (error) {\r\n        console.error('Erro ao recuperar os dados do usuário', error);\r\n        return false; // Indica falha\r\n      }\r\n    },\r\n    cancelarPedidoAmizade() {\r\n    // Substitua 'amizadeId' pelo ID do documento de amizade que você deseja cancelar.\r\n    // Você pode precisar ajustar a lógica para obter esse ID.\r\n    const amizadeId = this.amizadeId; \r\n\r\n    axios.delete(`/api/amizades/${amizadeId}`)\r\n      .then(() => {\r\n        this.estadoAmizade = 'nenhum';\r\n        this.amizadeId = null; // Adiciona esta linha para resetar o ID\r\n\r\n        // Faça qualquer outra coisa necessária após o cancelamento bem-sucedido.\r\n      })\r\n      .catch(error => {\r\n        console.error('Erro ao cancelar pedido de amizade', error);\r\n        // Trate o erro adequadamente.\r\n      });\r\n  },\r\n  verificarEstadoAmizade(usuarioId) {\r\n    this.$nextTick(() => {\r\n    if (this.utilizador && this.utilizador._id) {\r\n      const userIdLogado = this.utilizador._id;\r\n      axios.get(`/api/amizades/verificar/${userIdLogado}/${usuarioId}`)\r\n        .then(response => {\r\n          this.estadoAmizade = response.data.estado;\r\n          this.amizadeId = response.data.amizadeId;\r\n        })\r\n        .catch(error => {\r\n          console.error('Erro ao verificar estado da amizade', error);\r\n          this.estadoAmizade = 'nenhum';\r\n        });\r\n    }\r\n  });\r\n  },\r\n\r\n   enviarPedidoAmizade() {\r\n    const userIdLogado = this.utilizador._id // Obtenha o ID do usuário logado\r\n    const usuarioId = this.usuario._id; // ID do usuário visualizado\r\n\r\n  axios.post('/api/amizades', {\r\n    idutilizador1: userIdLogado,\r\n    idutilizador2: usuarioId,\r\n    dataAmizade: new Date(),\r\n    estado: 'pendente'\r\n  })\r\n  .then(response => {\r\n    this.estadoAmizade = 'pendente';\r\n    this.amizadeId = response.data._id; // Armazena o novo ID da amizade\r\n\r\n  })\r\n  .catch(error => {\r\n    console.error('Erro ao enviar pedido de amizade', error);\r\n  });\r\n},\r\n    navigateTo(path) {\r\n    this.$router.push(path);\r\n  },\r\n  openUserProfile(user) {\r\n    this.$router.push({ name: 'PaginaUtilizador', params: { id: user._id } });\r\n  },\r\n\r\n},\r\nasync created() {\r\n  if (await this.fetchUserLogado()) { // Espera e verifica se foi bem-sucedido\r\n    this.fetchUserData();\r\n    this.fetchAllPhotos(); // Adicione esta linha para buscar todas as fotos\r\n    this.fetchAmigos();\r\n  if (this.allPhotos.length > 0) {\r\n      this.checkUserReaction(this.allPhotos[this.currentPhotoIndex]._id);\r\n  }\r\n  if (this.allPhotos.length > 0) {\r\n      this.fetchReactionCounts(this.allPhotos[this.currentPhotoIndex]._id);\r\n  }\r\n  } else {\r\n    console.error('Erro: Utilizador logado ainda não definido após fetchUserLogado.');\r\n  }\r\n},\r\n  \r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.app-header {\r\n    position: fixed;\r\n    top: 0;\r\n    left:0;\r\n    width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0 2rem;\r\n  background-color: #ffffff; /* ou qualquer outra cor de fundo que você preferir */\r\n  padding-top: 20px;\r\n  padding-bottom: 20px;\r\n    z-index: 1030; /* Um z-index típico para cabeçalhos fixos, assegura que fica acima dos outros elementos */\r\n\r\n}\r\n.logo-container {\r\n  /* Se precisar, adicione estilos específicos aqui */\r\n}\r\n\r\n.logo {\r\n  height: 50px; /* Ajuste conforme o tamanho desejado para o seu logo */\r\n}\r\n\r\n.search-container {\r\n  /* Estilos para a barra de busca */\r\n}\r\n\r\n.search-input {\r\n  padding: 0.5rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 20px;\r\n}\r\n\r\n.nav-icons {\r\n  display: flex;\r\n  gap: 7rem; /* Aumenta o espaço entre os ícones */\r\n}\r\n\r\n.icon-link img {\r\n  height: 40px; /* Aumenta o tamanho dos ícones */\r\n  width: auto; /* Mantém a proporção dos ícones */\r\n}\r\n.app-container {\r\n    padding-top: 85px;\r\n  display: flex;\r\n  width: 100%; /* Ocupa 100% da largura da tela */\r\n  margin-top: 10px; /* Deve ser igual à altura do seu cabeçalho */\r\n  background-color: #f0f0f0; /* Cor de fundo cinza */\r\n}\r\n.container {\r\n  width: 100%; /* Ocupa 100% da largura da tela */\r\n  height: 100vh; /* Ocupa 100% da altura da viewport */\r\n  background-color: #f0f0f0; /* Cor de fundo cinza */\r\n  margin: 0; /* Remove margens padrão */\r\n  padding: 0; /* Remove preenchimentos padrão */\r\n  display: flex; /* Permite o uso de flexbox para alinhamento interno */\r\n  justify-content: center; /* Centraliza o conteúdo horizontalmente */\r\n  align-items: center; /* Centraliza o conteúdo verticalmente */\r\n}\r\n\r\n.sidebar {\r\n  position: sticky;\r\n    top: 60px;\r\n  width: 20%;\r\n  background-color: #d9d9d9; /* Cor de fundo para a barra lateral */\r\n  padding: 20px;\r\n  padding-top: 30px;\r\n  height: calc(110vh - 60px);\r\n  overflow-y: auto;\r\n  box-sizing: border-box; /* Inclui padding na largura total */\r\n}\r\n\r\n.profile-section {\r\n  text-align: center;\r\n  /* ... outros estilos ... */\r\n}\r\n\r\n.profile-picture {\r\n  width: 80px;\r\n  height: 80px;\r\n  border-radius: 50%;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.add-friend-section {\r\n  text-align: center;\r\n  padding: 20px;\r\n}\r\n\r\n.add-friend-button {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #5cb85c;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.add-friend-button:hover {\r\n  background-color: #4cae4c;\r\n}\r\n\r\n.friends-list {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\n\r\n.friends-list li {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.friend-picture {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  margin-right: 10px;\r\n}\r\n\r\n.content {\r\n  flex-grow: 1; /* Ocupa o espaço restante */\r\n  display: flex;\r\n  flex-direction: column; /* Empilha os cartões verticalmente */\r\n  align-items: center; /* Centraliza os cartões horizontalmente */\r\n  padding: 20px;\r\n  overflow-y: auto; /* Adiciona barra de rolagem se necessário */\r\n}\r\n\r\n.photo-card {\r\n  width: calc(80% - 40px); /* 80% da largura do content menos o padding */\r\n  margin-bottom: 20px; /* Espaçamento entre os cartões de foto */\r\n  /* ... outros estilos para o photo-card ... */\r\n}\r\n\r\n.photo {\r\n  width: 100%; /* Faz a imagem ocupar todo o cartão */\r\n  height: auto; /* Mantém a proporção da imagem */\r\n  border-radius: 10px; /* Arredonda os cantos da imagem */\r\n}\r\n\r\n.search-results {\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 0;\r\n  width: 100%;\r\n  background-color: #fff;\r\n  box-shadow: 0 4px 6px rgba(0,0,0,0.1);\r\n  z-index: 10;\r\n}\r\n\r\n.user-result {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 10px;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.user-photo {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  margin-right: 10px;\r\n}\r\n\r\n.carousel-control {\r\n  background: none;\r\n  border: none;\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  cursor: pointer;\r\n  font-size: 24px;\r\n  color: #333;\r\n}\r\n\r\n.carousel-control.left {\r\n  left: -50px;\r\n}\r\n\r\n.carousel-control.right {\r\n  right: -50px;\r\n}\r\n\r\n.photo {\r\n  display: block;\r\n  max-width: 100%;\r\n  height: auto;\r\n}\r\n\r\n.photo-container {\r\n  display: flex;\r\n  flex-direction: column; /* Empilha os elementos verticalmente */\r\n  align-items: center; /* Centraliza os elementos horizontalmente */\r\n  max-width: 400px; /* ou a largura que desejar */\r\n}\r\n\r\n.photo-description {\r\n  text-align: center;\r\n  margin-top: 10px; /* Ajuste o espaçamento conforme necessário */\r\n  font-style: italic;\r\n  color: #666; /* Cor cinza para a descrição */\r\n  width: 100%; /* Isso fará com que a descrição se estenda por toda a largura do contêiner */\r\n}\r\n\r\n.carousel-container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n}\r\n\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.user-profile-picture {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  margin-right: 10px;\r\n}\r\n\r\n.photo-actions {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-top: 10px;\r\n}\r\n\r\n.reaction-button, .comment-button {\r\n  padding: 5px 10px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  /* Adicione cores e estilos adicionais conforme necessário */\r\n}\r\n\r\n.reaction-button:hover, .comment-button:hover {\r\n  /* Estilos para o estado de hover */\r\n}\r\n\r\n.reactions-list {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 10px;\r\n}\r\n\r\n.reactions-list span {\r\n  font-size: 24px;\r\n  margin: 0 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.reactions-list span.active {\r\n  border: 2px solid blue; /* Estilo para destacar a reação ativa */\r\n}\r\ninput[type=\"text\"],\r\ninput[type=\"checkbox\"] {\r\n  /* Estilos dos inputs */\r\n}\r\n.user-reaction{\r\n    font-size: x-large;\r\n}\r\n\r\n\r\n.add-comment {\r\n  display: flex;\r\n  margin-top: 10px;\r\n}\r\n\r\n.add-comment input[type=\"text\"] {\r\n  padding: 8px;\r\n  margin: 5px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n\r\n.add-comment button {\r\n  padding: 6px 12px;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\n.comments-section {\r\n  margin-top: 20px;\r\n}\r\n\r\n.comment {\r\n  border-top: 1px solid #ccc;\r\n  padding: 10px;\r\n}\r\n\r\n.comment-user-info {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.comment-user-picture {\r\n  width: 30px;\r\n  height: 30px;\r\n  border-radius: 50%;\r\n  margin-right: 10px;\r\n} \r\n.reaction-counts span {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #ffffff;\r\n  border: 1px solid #ddd;\r\n  border-radius: 20px;\r\n  padding: 5px 10px;\r\n  margin: 5px;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n}\r\n\r\n.reaction-counts span:before {\r\n  content: '';\r\n  display: inline-block;\r\n  margin-right: 5px;\r\n}\r\n/* Estilos para os botões e inputs */\r\nbutton {\r\n  /* Estilos do botão */\r\n}\r\n\r\ninput[type=\"text\"],\r\ninput[type=\"checkbox\"] {\r\n  /* Estilos dos inputs */\r\n}\r\n\r\n/* Responsividade */\r\n@media (max-width: 768px) {\r\n  .app-container {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .sidebar,\r\n  .content {\r\n    width: 100%;\r\n    padding: 0;\r\n    margin-top: 0;\r\n  }\r\n}\r\n</style>\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}