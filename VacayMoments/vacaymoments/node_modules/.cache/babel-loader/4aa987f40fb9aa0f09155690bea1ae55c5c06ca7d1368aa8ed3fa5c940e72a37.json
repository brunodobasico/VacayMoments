{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport defaultAvatar from '@/assets/avatar.png'; // Ajuste o caminho se necessário\nimport AppHeader from '@/components/AppHeader.vue';\nexport default {\n  components: {\n    AppHeader\n  },\n  data() {\n    return {\n      usuario: null,\n      defaultAvatar,\n      allPhotos: [],\n      // Armazena todas as fotos, excluindo as do usuário logado\n      currentPhotoIndex: 0,\n      // Índice da foto atual no carrossel\n      showReactions: false,\n      // Estado para controlar a visibilidade das reações\n      userReaction: null,\n      // Estado para armazenar a reação do usuário para a foto atual\n      newComment: '',\n      // Para armazenar o novo comentário digitado pelo usuário\n      showCommentBox: false,\n      // novo estado para controlar a exibição da caixa de comentário\n      currentPhotoComments: [],\n      // Armazena os comentários da foto atual  \n      reactionCounts: {} // Inicialize como um objeto vazio ou como necessário\n    };\n  },\n  methods: {\n    deleteComment(commentId) {\n      // Solicita confirmação do usuário\n      if (window.confirm(\"Tem certeza que deseja eliminar o comentário?\")) {\n        axios.delete(`/api/comentario/${commentId}`, {\n          headers: {\n            'Authorization': 'Bearer ' + localStorage.getItem('userToken')\n          }\n        }).then(() => {\n          // Se a promessa for resolvida, informar o usuário do sucesso\n          alert(\"Comentário eliminado com sucesso!\");\n          // Atualizar os comentários exibidos\n          this.fetchComments(this.allPhotos[this.currentPhotoIndex]._id);\n        }).catch(error => {\n          console.error('Erro ao excluir comentário', error);\n          // Se ocorrer um erro, informar o usuário\n          alert(\"Ocorreu um erro ao tentar eliminar o comentário.\");\n        });\n      }\n    },\n    fetchComments(fotoId) {\n      axios.get(`/api/comentarios/${fotoId}`, {\n        headers: {\n          'Authorization': 'Bearer ' + localStorage.getItem('userToken')\n        }\n      }).then(response => {\n        this.currentPhotoComments = response.data || [];\n      }).catch(error => {\n        console.error('Erro ao buscar comentários', error);\n      });\n    },\n    postComment() {\n      const photoId = this.allPhotos[this.currentPhotoIndex]._id;\n      axios.post('/api/comentarios', {\n        descricao: this.newComment,\n        fotoID: photoId,\n        dataCriacao: new Date()\n      }, {\n        headers: {\n          'Authorization': 'Bearer ' + localStorage.getItem('userToken')\n        }\n      }).then(() => {\n        alert('Comentário adicionado com sucesso!'); // Exibe um alerta de sucesso\n        this.newComment = ''; // Limpa o campo de comentário\n        this.fetchComments(photoId); // Atualiza a lista de comentários\n        this.toggleCommentBox(); // Fecha a caixa de comentário após adicionar um novo\n      }).catch(error => {\n        console.error('Erro ao postar comentário', error);\n        // Trate aqui o erro, como mostrar uma mensagem para o usuário\n      });\n    },\n    fetchReactionCounts(fotoId) {\n      console.log(\"Cheguei\");\n      axios.get(`/api/reacoes/contagem/${fotoId}`).then(response => {\n        // response.data seria um array de objetos como { _id: 'like', count: 3 }\n        // Você precisará atualizar a UI de acordo, talvez adicionando esses dados ao objeto da foto\n        const photoIndex = this.allPhotos.findIndex(photo => photo._id === fotoId);\n        if (photoIndex !== -1) {\n          this.$set(this.allPhotos[photoIndex], 'reactionCounts', response.data);\n        }\n        console.log(\"TESTSTATS\");\n      }).catch(error => {\n        console.error('Erro ao buscar contagens de reações', error);\n      });\n    },\n    convertEmoji(tipoEmoji) {\n      const emojiMap = {\n        like: '👍',\n        heart: '❤️',\n        laugh: '😂',\n        happy: '😊'\n        // ...outros mapeamentos\n      };\n      return emojiMap[tipoEmoji] || tipoEmoji;\n    },\n    checkUserReaction(fotoId) {\n      axios.get(`/api/reacoes/${fotoId}`, {\n        headers: {\n          'Authorization': 'Bearer ' + localStorage.getItem('userToken')\n        }\n      }).then(response => {\n        if (response.data && response.data.reacao) {\n          this.userReaction = response.data.reacao;\n        } else {\n          this.userReaction = null;\n        }\n      }).catch(error => {\n        console.error('Erro ao verificar a reação do usuário', error);\n      });\n    },\n    handleReaction(reactionType) {\n      const photoId = this.allPhotos[this.currentPhotoIndex]._id;\n      this.userReaction = reactionType; // Armazena a reação do usuário\n      this.reagirAFoto(reactionType, photoId); // Envia a reação para o servidor\n      this.showReactions = false; // Esconde a lista de reações\n    },\n    reagirAFoto(tipoEmoji, fotoID) {\n      axios.post('/api/reacoes', {\n        tipoEmoji,\n        fotoID\n      }, {\n        headers: {\n          'Authorization': 'Bearer ' + localStorage.getItem('userToken')\n        }\n      }).then(() => {\n        // Supondo que você queira armazenar a reação do usuário\n        this.userReaction = tipoEmoji;\n\n        // Se você mantiver um registro de todas as reações por foto, você pode atualizar isso também\n        let photo = this.allPhotos.find(p => p._id === fotoID);\n        if (photo) {\n          if (!photo.reactions) {\n            photo.reactions = {};\n          }\n          // Incrementar o contador de reações para o tipoEmoji\n          if (photo.reactions[tipoEmoji]) {\n            photo.reactions[tipoEmoji]++;\n          } else {\n            photo.reactions[tipoEmoji] = 1;\n          }\n        }\n\n        // Atualizar qualquer outro estado ou componentes da interface do usuário conforme necessário\n        // Por exemplo, se você tiver um componente de notificação, pode querer mostrar uma mensagem de sucesso\n        // this.showNotification('Reação enviada com sucesso!');\n      }).catch(error => {\n        console.error('Erro ao reagir à foto', error);\n        // Tratar erros de interface do usuário, como mostrar uma mensagem de erro\n        // this.showNotification('Erro ao enviar reação.');\n      });\n    },\n    toggleReactions() {\n      this.showReactions = !this.showReactions;\n    },\n    toggleCommentBox() {\n      this.showCommentBox = !this.showCommentBox;\n    },\n    prevPhoto() {\n      if (this.currentPhotoIndex === 0) {\n        this.currentPhotoIndex = this.allPhotos.length - 1;\n      } else {\n        this.currentPhotoIndex--;\n      }\n    },\n    nextPhoto() {\n      if (this.currentPhotoIndex === this.allPhotos.length - 1) {\n        this.currentPhotoIndex = 0;\n      } else {\n        this.currentPhotoIndex++;\n      }\n    },\n    fetchAllPhotos() {\n      axios.get('/api/fotos', {\n        headers: {\n          'Authorization': 'Bearer ' + localStorage.getItem('userToken')\n        }\n      }).then(response => {\n        this.allPhotos = response.data;\n        if (this.allPhotos.length > 0) {\n          this.currentPhotoIndex = 0; // Assegure-se de que o índice da foto atual está definido\n          this.fetchComments(this.allPhotos[this.currentPhotoIndex]._id); // Agora buscamos os comentários para a foto atual\n          this.checkUserReaction(this.allPhotos[this.currentPhotoIndex]._id);\n        }\n      }).catch(error => {\n        console.error('Erro ao recuperar fotos', error);\n      });\n    },\n    navigateTo(path) {\n      this.$router.push(path);\n    },\n    fetchUserData() {\n      // No método fetchUserData do seu componente Vue\n      axios.get('/api/me', {\n        headers: {\n          'Authorization': 'Bearer ' + localStorage.getItem('userToken')\n        }\n      }).then(response => {\n        this.usuario = response.data; // Atualizar o estado com os dados do utilizador\n        console.log(\"asd\", this.usuario._id);\n      }).catch(error => {\n        console.error('Erro ao recuperar os dados do usuário', error);\n      });\n    },\n    logout() {\n      localStorage.removeItem('token'); // Remover o token do localStorage\n      this.$router.push('/login'); // Redirecionar para a página de login\n    }\n  },\n  created() {\n    this.fetchUserData(); // Buscar os dados do utilizador quando o componente é criado\n    this.fetchAllPhotos(); // Adicione esta linha para buscar todas as fotos\n    this.fetchComments();\n    if (this.allPhotos.length > 0) {\n      this.checkUserReaction(this.allPhotos[this.currentPhotoIndex]._id);\n    }\n    if (this.allPhotos.length > 0) {\n      this.fetchReactionCounts(this.allPhotos[this.currentPhotoIndex]._id);\n    }\n  },\n  watch: {\n    currentPhotoIndex(newIndex) {\n      const currentPhoto = this.allPhotos[newIndex];\n      if (currentPhoto) {\n        this.checkUserReaction(currentPhoto._id);\n        this.fetchComments(currentPhoto._id); // Adicionar esta linha\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","defaultAvatar","AppHeader","components","data","usuario","allPhotos","currentPhotoIndex","showReactions","userReaction","newComment","showCommentBox","currentPhotoComments","reactionCounts","methods","deleteComment","commentId","window","confirm","delete","headers","localStorage","getItem","then","alert","fetchComments","_id","catch","error","console","fotoId","get","response","postComment","photoId","post","descricao","fotoID","dataCriacao","Date","toggleCommentBox","fetchReactionCounts","log","photoIndex","findIndex","photo","$set","convertEmoji","tipoEmoji","emojiMap","like","heart","laugh","happy","checkUserReaction","reacao","handleReaction","reactionType","reagirAFoto","find","p","reactions","toggleReactions","prevPhoto","length","nextPhoto","fetchAllPhotos","navigateTo","path","$router","push","fetchUserData","logout","removeItem","created","watch","newIndex","currentPhoto"],"sources":["C:\\Users\\bruno\\OneDrive\\Escritorio\\PWA\\G6_23-24\\VacayMoments\\vacaymoments\\src\\views\\PaginaInicial.vue"],"sourcesContent":["<template>\r\n    <div>\r\n    <app-header></app-header>\r\n</div>\r\n    <div class=\"app-container\">\r\n    <aside class=\"sidebar\">\r\n  <!-- Foto do perfil e nome -->\r\n  <div class=\"profile-section\">\r\n    <img :src=\"usuario?.fotoPerfil || defaultAvatar\" alt=\"\" class=\"profile-picture\">\r\n  <h2>{{ usuario?.nome || 'Utilizador' }}</h2>\r\n  </div>\r\n\r\n  <!-- Filtro -->\r\n  <div class=\"filter-section\">\r\n    <h3>Filtrar por:</h3>\r\n    <div class=\"filter-item\">\r\n      <label for=\"tags\">Tags:</label>\r\n      <input type=\"text\" id=\"tags\" placeholder=\"Insira as tags\">\r\n    </div>\r\n    <div class=\"filter-item\">\r\n      <label>Privacidade:</label>\r\n      <div class=\"checkbox-container\">\r\n        <input type=\"checkbox\" id=\"public\" name=\"public\">\r\n        <label for=\"public\">Fotos públicas</label>\r\n      </div>\r\n      <div class=\"checkbox-container\">\r\n        <input type=\"checkbox\" id=\"friends\" name=\"friends\">\r\n        <label for=\"friends\">Fotos de amigos</label>\r\n      </div>\r\n    </div>\r\n    <button class=\"filter-button\">Filtrar</button>\r\n  </div>\r\n</aside>  \r\n    \r\n    <main class=\"content\">\r\n    <div class=\"carousel-container\">\r\n      <button v-if=\"allPhotos.length > 1\" class=\"carousel-control left\" @click=\"prevPhoto\">&lt;</button>\r\n    <div class=\"photo-container\">\r\n      <div v-if=\"allPhotos[currentPhotoIndex]\" class=\"user-info\">\r\n        <img :src=\"allPhotos[currentPhotoIndex].userPhoto || defaultAvatar\" alt=\"Foto do perfil\" class=\"user-profile-picture\">\r\n        <h3>{{ allPhotos[currentPhotoIndex].userName }}</h3>\r\n      </div>\r\n      <img v-if=\"allPhotos[currentPhotoIndex]\" :src=\"allPhotos[currentPhotoIndex].imagePath\" alt=\"User Photo\" class=\"photo\">\r\n      <div v-if=\"allPhotos[currentPhotoIndex]\" class=\"photo-description\">{{ allPhotos[currentPhotoIndex].descricao }}</div>\r\n      <div v-if=\"allPhotos[currentPhotoIndex]?.reactionCounts\" class=\"reaction-counts\">\r\n        <span v-for=\"reaction in allPhotos[currentPhotoIndex].reactionCounts\" :key=\"reaction._id\">\r\n          {{ convertEmoji(reaction._id) }}: {{ reaction.count }}\r\n        </span>\r\n      </div>\r\n      <div class=\"photo-actions\">\r\n        <button class=\"reaction-button\" @click=\"toggleReactions\">Reagir</button>\r\n        <div v-if=\"showReactions \" class=\"reactions-list\">\r\n          <span @click=\"handleReaction('like')\">👍</span>\r\n          <span @click=\"handleReaction('heart')\">❤️</span>\r\n          <span @click=\"handleReaction('laugh')\">😂</span>\r\n          <span @click=\"handleReaction('happy')\">😊</span>\r\n          <!-- Adicione mais emojis conforme necessário -->\r\n        </div>\r\n        <span\r\n          v-for=\"emoji in emojis\"\r\n          :key=\"emoji.type\"\r\n          :class=\"{ active: userReaction === emoji.type }\"\r\n          @click=\"handleReaction(emoji.type)\"\r\n        >{{ emoji.char }}\r\n        </span>\r\n        <div v-if=\"userReaction && !showReactions\" class=\"user-reaction\">\r\n          {{ convertEmoji(userReaction) }}\r\n        </div>\r\n        \r\n        <button class=\"comment-button\" @click=\"toggleCommentBox\">Comentar</button>\r\n        <div v-if=\"showCommentBox\" class=\"add-comment\">\r\n          <input type=\"text\" v-model=\"newComment\" placeholder=\"Adicione um comentário...\">\r\n          <button @click=\"postComment\">Enviar</button>\r\n        </div>\r\n        <div v-if=\"currentPhotoComments.length > 0\" class=\"comments-section\">\r\n      </div>\r\n      </div>\r\n      <button v-if=\"allPhotos.length > 1\" class=\"carousel-control right\" @click=\"nextPhoto\">&gt;</button>\r\n      </div>\r\n      </div>\r\n      <div v-if=\"currentPhotoComments.length > 0\" class=\"comments-section\">\r\n      <div class=\"comment\" v-for=\"comment in currentPhotoComments\" :key=\"comment._id\">\r\n        <div class=\"comment-user-info\">\r\n          <img :src=\"comment.userPhoto || defaultAvatar\" alt=\"\" class=\"comment-user-picture\">\r\n          <span>{{ comment.userName }}</span>\r\n          <button style=\"border: none;\" v-if=\"comment.userId === usuario._id\" @click=\"deleteComment(comment._id)\">🗑️</button>\r\n        </div>\r\n        <p>{{ comment.descricao }}</p>\r\n      </div>\r\n    </div>\r\n</main>\r\n  </div>\r\n</template>\r\n<script>\r\nimport axios from 'axios';\r\nimport defaultAvatar from '@/assets/avatar.png'; // Ajuste o caminho se necessário\r\nimport AppHeader from '@/components/AppHeader.vue';\r\n\r\nexport default {\r\n  components: {\r\n    AppHeader\r\n  },\r\n  data() {\r\n  return {\r\n    usuario: null,\r\n    defaultAvatar,\r\n    allPhotos: [], // Armazena todas as fotos, excluindo as do usuário logado\r\n    currentPhotoIndex: 0, // Índice da foto atual no carrossel\r\n    showReactions: false, // Estado para controlar a visibilidade das reações\r\n    userReaction: null, // Estado para armazenar a reação do usuário para a foto atual\r\n    newComment: '', // Para armazenar o novo comentário digitado pelo usuário\r\n    showCommentBox: false, // novo estado para controlar a exibição da caixa de comentário\r\n    currentPhotoComments: [], // Armazena os comentários da foto atual  \r\n    reactionCounts: {}, // Inicialize como um objeto vazio ou como necessário\r\n  };\r\n},\r\nmethods: {\r\n  deleteComment(commentId) {\r\n    // Solicita confirmação do usuário\r\n    if (window.confirm(\"Tem certeza que deseja eliminar o comentário?\")) {\r\n      axios.delete(`/api/comentario/${commentId}`, {\r\n        headers: {\r\n          'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n        }\r\n      })\r\n      .then(() => {\r\n        // Se a promessa for resolvida, informar o usuário do sucesso\r\n        alert(\"Comentário eliminado com sucesso!\");\r\n        // Atualizar os comentários exibidos\r\n        this.fetchComments(this.allPhotos[this.currentPhotoIndex]._id);\r\n      })\r\n      .catch(error => {\r\n        console.error('Erro ao excluir comentário', error);\r\n        // Se ocorrer um erro, informar o usuário\r\n        alert(\"Ocorreu um erro ao tentar eliminar o comentário.\");\r\n      });\r\n    }\r\n  },\r\n  fetchComments(fotoId) {\r\n    axios.get(`/api/comentarios/${fotoId}`, {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n      }\r\n    })\r\n    .then(response => {\r\n      this.currentPhotoComments = response.data || [];\r\n    })\r\n    .catch(error => {\r\n      console.error('Erro ao buscar comentários', error);\r\n    });\r\n  },\r\n  postComment() {\r\n    const photoId = this.allPhotos[this.currentPhotoIndex]._id;\r\n    axios.post('/api/comentarios', {\r\n      descricao: this.newComment,\r\n      fotoID: photoId,\r\n      dataCriacao: new Date()\r\n    }, {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n      }\r\n    })\r\n    .then(() => {\r\n      alert('Comentário adicionado com sucesso!'); // Exibe um alerta de sucesso\r\n      this.newComment = ''; // Limpa o campo de comentário\r\n      this.fetchComments(photoId); // Atualiza a lista de comentários\r\n      this.toggleCommentBox(); // Fecha a caixa de comentário após adicionar um novo\r\n    })\r\n    .catch(error => {\r\n      console.error('Erro ao postar comentário', error);\r\n      // Trate aqui o erro, como mostrar uma mensagem para o usuário\r\n    });\r\n  },\r\n  fetchReactionCounts(fotoId) {\r\n    console.log(\"Cheguei\");\r\n    axios.get(`/api/reacoes/contagem/${fotoId}`)\r\n    .then(response => {\r\n      // response.data seria um array de objetos como { _id: 'like', count: 3 }\r\n      // Você precisará atualizar a UI de acordo, talvez adicionando esses dados ao objeto da foto\r\n      const photoIndex = this.allPhotos.findIndex(photo => photo._id === fotoId);\r\n      if (photoIndex !== -1) {\r\n        this.$set(this.allPhotos[photoIndex], 'reactionCounts', response.data);\r\n      }\r\n      console.log(\"TESTSTATS\");\r\n    })\r\n    .catch(error => {\r\n      console.error('Erro ao buscar contagens de reações', error);\r\n    });\r\n  },\r\n  convertEmoji(tipoEmoji) {\r\n    const emojiMap = {\r\n      like: '👍',\r\n      heart: '❤️',\r\n      laugh: '😂',\r\n      happy: '😊',\r\n      // ...outros mapeamentos\r\n    };\r\n    return emojiMap[tipoEmoji] || tipoEmoji;\r\n  },\r\n  checkUserReaction(fotoId) {\r\n    axios.get(`/api/reacoes/${fotoId}`, {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n      }\r\n    })\r\n    .then(response => {\r\n      if (response.data && response.data.reacao) {\r\n        this.userReaction = response.data.reacao;\r\n      } else {\r\n        this.userReaction = null;\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Erro ao verificar a reação do usuário', error);\r\n    });\r\n  },\r\n  handleReaction(reactionType) {\r\n    const photoId = this.allPhotos[this.currentPhotoIndex]._id;\r\n    this.userReaction = reactionType; // Armazena a reação do usuário\r\n    this.reagirAFoto(reactionType, photoId); // Envia a reação para o servidor\r\n    this.showReactions = false; // Esconde a lista de reações\r\n  },\r\n  reagirAFoto(tipoEmoji, fotoID) {\r\n    axios.post('/api/reacoes', {\r\n      tipoEmoji,\r\n      fotoID\r\n    }, {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n      }\r\n    })\r\n    .then(() => {\r\n      // Supondo que você queira armazenar a reação do usuário\r\n      this.userReaction = tipoEmoji;\r\n\r\n      // Se você mantiver um registro de todas as reações por foto, você pode atualizar isso também\r\n      let photo = this.allPhotos.find(p => p._id === fotoID);\r\n      if (photo) {\r\n        if (!photo.reactions) {\r\n          photo.reactions = {};\r\n        }\r\n        // Incrementar o contador de reações para o tipoEmoji\r\n        if (photo.reactions[tipoEmoji]) {\r\n          photo.reactions[tipoEmoji]++;\r\n        } else {\r\n          photo.reactions[tipoEmoji] = 1;\r\n        }\r\n      }\r\n      \r\n      // Atualizar qualquer outro estado ou componentes da interface do usuário conforme necessário\r\n      // Por exemplo, se você tiver um componente de notificação, pode querer mostrar uma mensagem de sucesso\r\n      // this.showNotification('Reação enviada com sucesso!');\r\n\r\n    })\r\n    .catch(error => {\r\n      console.error('Erro ao reagir à foto', error);\r\n      // Tratar erros de interface do usuário, como mostrar uma mensagem de erro\r\n      // this.showNotification('Erro ao enviar reação.');\r\n    });\r\n  },\r\n  toggleReactions() {\r\n    this.showReactions = !this.showReactions;\r\n  },\r\n  toggleCommentBox() {\r\n    this.showCommentBox = !this.showCommentBox;\r\n  },\r\n  prevPhoto() {\r\n    if (this.currentPhotoIndex === 0) {\r\n      this.currentPhotoIndex = this.allPhotos.length - 1;\r\n    } else {\r\n      this.currentPhotoIndex--;\r\n    }\r\n  },\r\n  nextPhoto() {\r\n    if (this.currentPhotoIndex === this.allPhotos.length - 1) {\r\n      this.currentPhotoIndex = 0;\r\n    } else {\r\n      this.currentPhotoIndex++;\r\n    }\r\n  },\r\n  fetchAllPhotos() {\r\n    axios.get('/api/fotos', {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n      }\r\n    })\r\n    .then(response => {\r\n    this.allPhotos = response.data;\r\n    if (this.allPhotos.length > 0) {\r\n        this.currentPhotoIndex = 0; // Assegure-se de que o índice da foto atual está definido\r\n        this.fetchComments(this.allPhotos[this.currentPhotoIndex]._id); // Agora buscamos os comentários para a foto atual\r\n        this.checkUserReaction(this.allPhotos[this.currentPhotoIndex]._id);\r\n      }\r\n  })\r\n    .catch(error => {\r\n      console.error('Erro ao recuperar fotos', error);\r\n    });\r\n  },\r\n  navigateTo(path) {\r\n    this.$router.push(path);\r\n  },\r\n  fetchUserData() {\r\n    // No método fetchUserData do seu componente Vue\r\naxios.get('/api/me', {\r\n  headers: {\r\n    'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n  }\r\n})\r\n\r\n.then(response => {\r\n  this.usuario = response.data; // Atualizar o estado com os dados do utilizador\r\n  console.log(\"asd\",this.usuario._id);\r\n})\r\n.catch(error => {\r\n  console.error('Erro ao recuperar os dados do usuário', error);\r\n});\r\n\r\n  },\r\n  logout() {\r\n    localStorage.removeItem('token'); // Remover o token do localStorage\r\n    this.$router.push('/login'); // Redirecionar para a página de login\r\n  },\r\n},\r\ncreated() {\r\n    this.fetchUserData(); // Buscar os dados do utilizador quando o componente é criado\r\n    this.fetchAllPhotos(); // Adicione esta linha para buscar todas as fotos\r\n    this.fetchComments();\r\n    if (this.allPhotos.length > 0) {\r\n      this.checkUserReaction(this.allPhotos[this.currentPhotoIndex]._id);\r\n    }\r\n    if (this.allPhotos.length > 0) {\r\n      this.fetchReactionCounts(this.allPhotos[this.currentPhotoIndex]._id);\r\n    }\r\n},\r\nwatch: {\r\n  currentPhotoIndex(newIndex) {\r\n    const currentPhoto = this.allPhotos[newIndex];\r\n    if (currentPhoto) {\r\n      this.checkUserReaction(currentPhoto._id);\r\n      this.fetchComments(currentPhoto._id); // Adicionar esta linha\r\n    }\r\n  }\r\n},\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.app-header {\r\n    position: fixed;\r\n    top: 0;\r\n    left:0;\r\n    width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0 2rem;\r\n  background-color: #ffffff; /* ou qualquer outra cor de fundo que você preferir */\r\n  padding-top: 20px;\r\n  padding-bottom: 20px;\r\n    z-index: 1030; /* Um z-index típico para cabeçalhos fixos, assegura que fica acima dos outros elementos */\r\n\r\n}\r\n.logo-container {\r\n  /* Se precisar, adicione estilos específicos aqui */\r\n}\r\n\r\n.logo {\r\n  height: 50px; /* Ajuste conforme o tamanho desejado para o seu logo */\r\n}\r\n\r\n.search-container {\r\n  /* Estilos para a barra de busca */\r\n}\r\n\r\n.search-input {\r\n  padding: 0.5rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 20px;\r\n}\r\n\r\n.nav-icons {\r\n  display: flex;\r\n  gap: 7rem; /* Aumenta o espaço entre os ícones */\r\n}\r\n\r\n.icon-link img {\r\n  height: 40px; /* Aumenta o tamanho dos ícones */\r\n  width: auto; /* Mantém a proporção dos ícones */\r\n}\r\n.app-container {\r\n    padding-top: 85px;\r\n  display: flex;\r\n  width: 100%; /* Ocupa 100% da largura da tela */\r\n  margin-top: 10px; /* Deve ser igual à altura do seu cabeçalho */\r\n  background-color: #f0f0f0; /* Cor de fundo cinza */\r\n}\r\n.container {\r\n  width: 100%; /* Ocupa 100% da largura da tela */\r\n  height: 100vh; /* Ocupa 100% da altura da viewport */\r\n  background-color: #f0f0f0; /* Cor de fundo cinza */\r\n  margin: 0; /* Remove margens padrão */\r\n  padding: 0; /* Remove preenchimentos padrão */\r\n  display: flex; /* Permite o uso de flexbox para alinhamento interno */\r\n  justify-content: center; /* Centraliza o conteúdo horizontalmente */\r\n  align-items: center; /* Centraliza o conteúdo verticalmente */\r\n}\r\n\r\n  .sidebar {\r\n    position: sticky;\r\n      top: 60px;\r\n    width: 20%;\r\n    background-color: #d9d9d9; /* Cor de fundo para a barra lateral */\r\n    padding: 20px;\r\n    padding-top: 30px;\r\n    height: calc(110vh - 60px);\r\n    overflow-y: auto;\r\n    box-sizing: border-box; /* Inclui padding na largura total */\r\n  }\r\n\r\n.profile-section {\r\n  text-align: center;\r\n  /* ... outros estilos ... */\r\n}\r\n\r\n.profile-picture {\r\n  width: 80px;\r\n  height: 80px;\r\n  border-radius: 50%;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.add-friend-section {\r\n  text-align: center;\r\n  padding: 20px;\r\n}\r\n\r\n.add-friend-button {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #5cb85c;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.add-friend-button:hover {\r\n  background-color: #4cae4c;\r\n}\r\n\r\n.friends-list {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\n\r\n.friends-list li {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.friend-picture {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  margin-right: 10px;\r\n}\r\n\r\n.content {\r\n  flex-grow: 1; /* Ocupa o espaço restante */\r\n  display: flex;\r\n  flex-direction: column; /* Empilha os cartões verticalmente */\r\n  align-items: center; /* Centraliza os cartões horizontalmente */\r\n  padding: 20px;\r\n  overflow-y: auto; /* Adiciona barra de rolagem se necessário */\r\n  position: relative;\r\n\r\n}\r\n\r\n.photo-card {\r\n  width: calc(80% - 40px); /* 80% da largura do content menos o padding */\r\n  margin-bottom: 20px; /* Espaçamento entre os cartões de foto */\r\n  /* ... outros estilos para o photo-card ... */\r\n}\r\n\r\n.photo {\r\n  width: 100%; /* Faz a imagem ocupar todo o cartão */\r\n  height: auto; /* Mantém a proporção da imagem */\r\n  border-radius: 10px; /* Arredonda os cantos da imagem */\r\n}\r\n\r\n/* Estilos para os botões e inputs */\r\nbutton {\r\n  /* Estilos do botão */\r\n}\r\n\r\n.filter-item {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.filter-item label {\r\n  display: block;\r\n  margin-bottom: 5px;\r\n  font-weight: bold;\r\n}\r\n\r\n.filter-item input[type=\"text\"] {\r\n  width: 100%;\r\n  padding: 8px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n\r\n.checkbox-container {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.checkbox-container input {\r\n  margin-right: 5px;\r\n}\r\n\r\n.filter-button {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #5cb85c;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\n.filter-button:hover {\r\n  background-color: #4cae4c;\r\n}\r\n\r\n.carousel-control {\r\n  background: none;\r\n  border: none;\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  cursor: pointer;\r\n  font-size: 24px;\r\n  color: #333;\r\n}\r\n\r\n.carousel-control.left {\r\n  left: -50px;\r\n}\r\n\r\n.carousel-control.right {\r\n  right: -50px;\r\n}\r\n\r\n.photo {\r\n  display: block;\r\n  max-width: 100%;\r\n  height: auto;\r\n}\r\n\r\n.photo-container {\r\n  display: flex;\r\n  flex-direction: column; /* Empilha os elementos verticalmente */\r\n  align-items: center; /* Centraliza os elementos horizontalmente */\r\n  max-width: 400px; /* ou a largura que desejar */\r\n}\r\n\r\n.photo-description {\r\n  text-align: center;\r\n  margin-top: 10px; /* Ajuste o espaçamento conforme necessário */\r\n  font-style: italic;\r\n  color: #666; /* Cor cinza para a descrição */\r\n  width: 100%; /* Isso fará com que a descrição se estenda por toda a largura do contêiner */\r\n}\r\n\r\n.carousel-container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n}\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.user-profile-picture {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  margin-right: 10px;\r\n}\r\n\r\n.photo-actions {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-top: 10px;\r\n}\r\n\r\n.reaction-button, .comment-button {\r\n  padding: 5px 10px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  /* Adicione cores e estilos adicionais conforme necessário */\r\n}\r\n\r\n.reaction-button:hover, .comment-button:hover {\r\n  /* Estilos para o estado de hover */\r\n}\r\n\r\n.reactions-list {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 10px;\r\n}\r\n\r\n.reactions-list span {\r\n  font-size: 24px;\r\n  margin: 0 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.reactions-list span.active {\r\n  border: 2px solid blue; /* Estilo para destacar a reação ativa */\r\n}\r\ninput[type=\"text\"],\r\ninput[type=\"checkbox\"] {\r\n  /* Estilos dos inputs */\r\n}\r\n.user-reaction{\r\n    font-size: x-large;\r\n}\r\n\r\n.add-comment {\r\n  display: flex;\r\n  margin-top: 10px;\r\n}\r\n\r\n.add-comment input[type=\"text\"] {\r\n  padding: 8px;\r\n  margin: 5px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n\r\n.add-comment button {\r\n  padding: 6px 12px;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\n.comments-section {\r\n  margin-top: 20px;\r\n}\r\n\r\n.comment {\r\n  border-top: 1px solid #ccc;\r\n  padding: 10px;\r\n}\r\n\r\n.comment-user-info {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.comment-user-picture {\r\n  width: 30px;\r\n  height: 30px;\r\n  border-radius: 50%;\r\n  margin-right: 10px;\r\n} \r\n/* Responsividade */\r\n@media (max-width: 768px) {\r\n  .app-container {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .sidebar,\r\n  .content {\r\n    width: 100%;\r\n    padding: 0;\r\n    margin-top: 0;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}