{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport defaultAvatar from '@/assets/avatar.png'; // Ajuste o caminho se necessário\nimport AppHeader from '@/components/AppHeader.vue';\nexport default {\n  components: {\n    AppHeader\n  },\n  data() {\n    return {\n      usuario: null,\n      defaultAvatar,\n      emojis: [],\n      // adicione esta linha se \"emojis\" for uma lista que você irá iterar\n      estadoAmizade: null,\n      utilizador: null,\n      // Deve ser atualizado com os dados do usuário logado\n      amigos: [],\n      allPhotos: [],\n      // Armazena todas as fotos, excluindo as do usuário logado\n      currentPhotoIndex: 0,\n      // Índice da foto atual no carrossel\n      showReactions: false,\n      // Estado para controlar a visibilidade das reações\n      userReaction: null,\n      // Estado para armazenar a reação do usuário para a foto atual\n      newComment: '',\n      // Para armazenar o novo comentário digitado pelo usuário\n      showCommentBox: false,\n      // novo estado para controlar a exibição da caixa de comentário\n      currentPhotoComments: [],\n      // Armazena os comentários da foto atual  \n      reactionCounts: {} // Inicialize como um objeto vazio ou como necessário\n    };\n  },\n  watch: {\n    '$route.params.id': {\n      immediate: true,\n      handler(newId, oldId) {\n        if (newId !== oldId) {\n          this.fetchUserData();\n          this.fetchAllPhotos();\n        }\n      }\n    },\n    currentPhotoIndex(newIndex, oldIndex) {\n      if (newIndex !== oldIndex) {\n        const currentPhoto = this.allPhotos[newIndex];\n        if (currentPhoto) {\n          this.checkUserReaction(currentPhoto._id);\n          this.fetchComments(currentPhoto._id); // Adicionar esta linha\n          this.fetchReactionCounts(currentPhoto._id);\n        }\n      }\n    }\n  },\n  methods: {\n    async fetchAmigos() {\n      try {\n        const response = await axios.get(`/api/amizades/amigos/${this.usuario._id}`, {\n          headers: {\n            'Authorization': 'Bearer ' + localStorage.getItem('userToken')\n          }\n        });\n        this.amigos = response.data; // Supondo que a API retorne uma lista de objetos de amigos\n      } catch (error) {\n        console.error('Erro ao buscar amigos', error);\n      }\n    },\n    deleteComment(commentId) {\n      // Solicita confirmação do usuário\n      if (window.confirm(\"Tem certeza que deseja eliminar o comentário?\")) {\n        axios.delete(`/api/comentario/${commentId}`, {\n          headers: {\n            'Authorization': 'Bearer ' + localStorage.getItem('userToken')\n          }\n        }).then(() => {\n          // Se a promessa for resolvida, informar o usuário do sucesso\n          alert(\"Comentário eliminado com sucesso!\");\n          // Atualizar os comentários exibidos\n          this.fetchComments(this.allPhotos[this.currentPhotoIndex]._id);\n        }).catch(error => {\n          console.error('Erro ao excluir comentário', error);\n          // Se ocorrer um erro, informar o usuário\n          alert(\"Ocorreu um erro ao tentar eliminar o comentário.\");\n        });\n      }\n    },\n    fetchComments(fotoId) {\n      axios.get(`/api/comentarios/${fotoId}`, {\n        headers: {\n          'Authorization': 'Bearer ' + localStorage.getItem('userToken')\n        }\n      }).then(response => {\n        this.currentPhotoComments = response.data || [];\n      }).catch(error => {\n        console.error('Erro ao buscar comentários', error);\n      });\n    },\n    postComment() {\n      const photoId = this.allPhotos[this.currentPhotoIndex]._id;\n      axios.post('/api/comentarios', {\n        descricao: this.newComment,\n        fotoID: photoId,\n        dataCriacao: new Date()\n      }, {\n        headers: {\n          'Authorization': 'Bearer ' + localStorage.getItem('userToken')\n        }\n      }).then(() => {\n        alert('Comentário adicionado com sucesso!'); // Exibe um alerta de sucesso\n        this.newComment = ''; // Limpa o campo de comentário\n        this.fetchComments(photoId); // Atualiza a lista de comentários\n        this.toggleCommentBox(); // Fecha a caixa de comentário após adicionar um novo\n      }).catch(error => {\n        console.error('Erro ao postar comentário', error);\n        // Trate aqui o erro, como mostrar uma mensagem para o usuário\n      });\n    },\n    fetchReactionCounts(fotoId) {\n      axios.get(`/api/reacoes/contagem/${fotoId}`).then(response => {\n        const photoIndex = this.allPhotos.findIndex(photo => photo._id === fotoId);\n        if (photoIndex !== -1) {\n          // No Vue 3, você pode simplesmente atribuir o valor\n          this.allPhotos[photoIndex].reactionCounts = response.data;\n          // Certifique-se de que reactionCounts é reativo, definindo-o no estado do componente\n        }\n      }).catch(error => {\n        console.error('Erro ao buscar contagens de reações', error);\n      });\n    },\n    convertEmoji(tipoEmoji) {\n      const emojiMap = {\n        like: '👍',\n        heart: '❤️',\n        laugh: '😂',\n        happy: '😊'\n        // ...outros mapeamentos\n      };\n      return emojiMap[tipoEmoji] || tipoEmoji;\n    },\n    checkUserReaction(fotoId) {\n      axios.get(`/api/reacoes/${fotoId}`, {\n        headers: {\n          'Authorization': 'Bearer ' + localStorage.getItem('userToken')\n        }\n      }).then(response => {\n        if (response.data && response.data.reacao) {\n          this.userReaction = response.data.reacao;\n        } else {\n          this.userReaction = null;\n        }\n      }).catch(error => {\n        console.error('Erro ao verificar a reação do usuário', error);\n      });\n    },\n    reagirAFoto(tipoEmoji, fotoID) {\n      axios.post('/api/reacoes', {\n        tipoEmoji,\n        fotoID\n      }, {\n        headers: {\n          'Authorization': 'Bearer ' + localStorage.getItem('userToken')\n        }\n      }).then(() => {\n        // Supondo que você queira armazenar a reação do usuário\n        this.userReaction = tipoEmoji;\n        // Se você mantiver um registro de todas as reações por foto, você pode atualizar isso também\n        let photo = this.allPhotos.find(p => p._id === fotoID);\n        if (photo) {\n          this.fetchReactionCounts(fotoID);\n          if (!photo.reactions) {\n            photo.reactions = {};\n          }\n          // Incrementar o contador de reações para o tipoEmoji\n          if (photo.reactions[tipoEmoji]) {\n            photo.reactions[tipoEmoji]++;\n          } else {\n            photo.reactions[tipoEmoji] = 1;\n          }\n        }\n\n        // Atualizar qualquer outro estado ou componentes da interface do usuário conforme necessário\n        // Por exemplo, se você tiver um componente de notificação, pode querer mostrar uma mensagem de sucesso\n        // this.showNotification('Reação enviada com sucesso!');\n      }).catch(error => {\n        console.error('Erro ao reagir à foto', error);\n        // Tratar erros de interface do usuário, como mostrar uma mensagem de erro\n        // this.showNotification('Erro ao enviar reação.');\n      });\n    },\n    toggleReactions() {\n      this.showReactions = !this.showReactions;\n    },\n    toggleCommentBox() {\n      this.showCommentBox = !this.showCommentBox;\n    },\n    handleReaction(reactionType) {\n      const photoId = this.allPhotos[this.currentPhotoIndex]._id;\n      this.userReaction = reactionType; // Armazena a reação do usuário\n      this.reagirAFoto(reactionType, photoId); // Envia a reação para o servidor\n      this.showReactions = false; // Esconde a lista de reações\n    },\n    getAbsolutePath(relativePath) {\n      // Isso garante que o caminho da imagem sempre comece a partir da raiz\n      return `${window.location.origin}/${relativePath}`;\n    },\n    prevPhoto() {\n      if (this.currentPhotoIndex === 0) {\n        this.currentPhotoIndex = this.allPhotos.length - 1;\n      } else {\n        this.currentPhotoIndex--;\n      }\n    },\n    nextPhoto() {\n      if (this.currentPhotoIndex === this.allPhotos.length - 1) {\n        this.currentPhotoIndex = 0;\n      } else {\n        this.currentPhotoIndex++;\n      }\n    },\n    fetchAllPhotos() {\n      const userId = this.$route.params.id;\n      axios.get(`/api/fotos/${userId}`, {\n        headers: {\n          'Authorization': 'Bearer ' + localStorage.getItem('userToken')\n        }\n      }).then(response => {\n        this.allPhotos = response.data;\n      }).catch(error => {\n        console.error('Erro ao recuperar fotos', error);\n      });\n    },\n    fetchUserData() {\n      const userId = this.$route.params.id;\n      if (userId) {\n        axios.get(`/api/utilizador/${userId}`).then(response => {\n          this.usuario = response.data;\n          this.verificarEstadoAmizade(response.data._id);\n        }).catch(error => {\n          console.error('Erro ao recuperar os dados do utilizador', error);\n        });\n      }\n    },\n    async fetchUserLogado() {\n      try {\n        const response = await axios.get('/api/me', {\n          headers: {\n            'Authorization': 'Bearer ' + localStorage.getItem('userToken')\n          }\n        });\n        this.utilizador = response.data;\n        return true; // Indica sucesso\n      } catch (error) {\n        console.error('Erro ao recuperar os dados do usuário', error);\n        return false; // Indica falha\n      }\n    },\n    cancelarPedidoAmizade() {\n      // Substitua 'amizadeId' pelo ID do documento de amizade que você deseja cancelar.\n      // Você pode precisar ajustar a lógica para obter esse ID.\n      const amizadeId = this.amizadeId;\n      axios.delete(`/api/amizades/${amizadeId}`).then(() => {\n        this.estadoAmizade = 'nenhum';\n        this.amizadeId = null; // Adiciona esta linha para resetar o ID\n\n        // Faça qualquer outra coisa necessária após o cancelamento bem-sucedido.\n      }).catch(error => {\n        console.error('Erro ao cancelar pedido de amizade', error);\n        // Trate o erro adequadamente.\n      });\n    },\n    verificarEstadoAmizade(usuarioId) {\n      this.$nextTick(() => {\n        if (this.utilizador && this.utilizador._id) {\n          const userIdLogado = this.utilizador._id;\n          axios.get(`/api/amizades/verificar/${userIdLogado}/${usuarioId}`).then(response => {\n            this.estadoAmizade = response.data.estado;\n            this.amizadeId = response.data.amizadeId;\n          }).catch(error => {\n            console.error('Erro ao verificar estado da amizade', error);\n            this.estadoAmizade = 'nenhum';\n          });\n        }\n      });\n    },\n    enviarPedidoAmizade() {\n      const userIdLogado = this.utilizador._id; // Obtenha o ID do usuário logado\n      const usuarioId = this.usuario._id; // ID do usuário visualizado\n\n      axios.post('/api/amizades', {\n        idutilizador1: userIdLogado,\n        idutilizador2: usuarioId,\n        dataAmizade: new Date(),\n        estado: 'pendente'\n      }).then(response => {\n        this.estadoAmizade = 'pendente';\n        this.amizadeId = response.data._id; // Armazena o novo ID da amizade\n      }).catch(error => {\n        console.error('Erro ao enviar pedido de amizade', error);\n      });\n    },\n    navigateTo(path) {\n      this.$router.push(path);\n    },\n    openUserProfile(user) {\n      this.$router.push({\n        name: 'PaginaUtilizador',\n        params: {\n          id: user._id\n        }\n      });\n    }\n  },\n  async created() {\n    if (await this.fetchUserLogado()) {\n      // Espera e verifica se foi bem-sucedido\n      this.fetchUserData();\n      this.fetchAllPhotos(); // Adicione esta linha para buscar todas as fotos\n      this.fetchAmigos();\n      if (this.allPhotos.length > 0) {\n        this.checkUserReaction(this.allPhotos[this.currentPhotoIndex]._id);\n      }\n      if (this.allPhotos.length > 0) {\n        this.fetchReactionCounts(this.allPhotos[this.currentPhotoIndex]._id);\n      }\n    } else {\n      console.error('Erro: Utilizador logado ainda não definido após fetchUserLogado.');\n    }\n  }\n};","map":{"version":3,"names":["axios","defaultAvatar","AppHeader","components","data","usuario","emojis","estadoAmizade","utilizador","amigos","allPhotos","currentPhotoIndex","showReactions","userReaction","newComment","showCommentBox","currentPhotoComments","reactionCounts","watch","immediate","handler","newId","oldId","fetchUserData","fetchAllPhotos","newIndex","oldIndex","currentPhoto","checkUserReaction","_id","fetchComments","fetchReactionCounts","methods","fetchAmigos","response","get","headers","localStorage","getItem","error","console","deleteComment","commentId","window","confirm","delete","then","alert","catch","fotoId","postComment","photoId","post","descricao","fotoID","dataCriacao","Date","toggleCommentBox","photoIndex","findIndex","photo","convertEmoji","tipoEmoji","emojiMap","like","heart","laugh","happy","reacao","reagirAFoto","find","p","reactions","toggleReactions","handleReaction","reactionType","getAbsolutePath","relativePath","location","origin","prevPhoto","length","nextPhoto","userId","$route","params","id","verificarEstadoAmizade","fetchUserLogado","cancelarPedidoAmizade","amizadeId","usuarioId","$nextTick","userIdLogado","estado","enviarPedidoAmizade","idutilizador1","idutilizador2","dataAmizade","navigateTo","path","$router","push","openUserProfile","user","name","created"],"sources":["C:\\Users\\bruno\\OneDrive\\Escritorio\\PWA\\G6_23-24\\VacayMoments\\vacaymoments\\src\\views\\PaginaUtilizador.vue"],"sourcesContent":["\r\n<template>\r\n    <div>\r\n    <app-header></app-header>\r\n</div>\r\n  <div class=\"app-container\">\r\n    <aside class=\"sidebar\">\r\n  <!-- Foto do perfil e nome -->\r\n  <div class=\"profile-section\">\r\n  <img :src=\"usuario?.fotoPerfil || defaultAvatar\" alt=\"\" class=\"profile-picture\">\r\n  <h2>{{ usuario?.nome || 'Usuário Não Encontrado' }}</h2>\r\n</div>\r\n\r\n  <!-- Seção de Adicionar Amigo -->\r\n  <div class=\"add-friend-section\">\r\n  <button v-if=\"estadoAmizade === 'nenhum'\" \r\n          type=\"button\" \r\n          class=\"btn btn-success btn-lg\"\r\n          @click=\"enviarPedidoAmizade\">\r\n    Adicionar Amigo\r\n  </button>\r\n  <p v-else-if=\"estadoAmizade === 'pendente'\">\r\n    Pedido pendente\r\n  </p>\r\n  <button v-if=\"estadoAmizade === 'pendente'\"\r\n          type=\"button\"\r\n          class=\"btn btn-warning btn-lg\"\r\n          @click=\"cancelarPedidoAmizade\">\r\n    Cancelar Pedido\r\n  </button>\r\n  <p v-else-if=\"estadoAmizade === 'amigos'\">\r\n    Amigos\r\n  </p>\r\n</div>\r\n<div class=\"friends-list-section\">\r\n  <h3>Amigos</h3>\r\n  <ul>  \r\n    <li v-for=\"amigo in amigos\" :key=\"amigo._id\">\r\n      <img :src=\"amigo.fotoPerfil || defaultAvatar\"  class=\"friend-picture\">\r\n      <span>{{ amigo.nome }}</span>\r\n    </li>\r\n  </ul>\r\n</div>\r\n\r\n</aside>\r\n    \r\n  <main class=\"content\">\r\n    <div class=\"carousel-container\">\r\n      <button v-if=\"allPhotos.length > 1\" class=\"carousel-control left\" @click=\"prevPhoto\">&lt;</button>\r\n      <div class=\"photo-container\">\r\n        <img v-if=\"allPhotos[currentPhotoIndex]\" :src=\"getAbsolutePath(allPhotos[currentPhotoIndex].imagePath)\" alt=\"User Photo\" class=\"photo\">\r\n        <div v-if=\"allPhotos[currentPhotoIndex]\" class=\"photo-description\">{{ allPhotos[currentPhotoIndex].descricao }}</div>\r\n        <div v-if=\"allPhotos[currentPhotoIndex]?.reactionCounts\" class=\"reaction-counts\">\r\n          <span v-for=\"reaction in allPhotos[currentPhotoIndex].reactionCounts\" :key=\"reaction._id\">\r\n            {{ convertEmoji(reaction._id) }}: {{ reaction.count }}\r\n          </span>\r\n        </div>\r\n        <div class=\"photo-actions\">\r\n          <button class=\"reaction-button\" @click=\"toggleReactions\">Reagir</button>\r\n          <div v-if=\"showReactions \" class=\"reactions-list\">\r\n            <span @click=\"handleReaction('like')\">👍</span>\r\n            <span @click=\"handleReaction('heart')\">❤️</span>\r\n            <span @click=\"handleReaction('laugh')\">😂</span>\r\n            <span @click=\"handleReaction('happy')\">😊</span>\r\n            <!-- Adicione mais emojis conforme necessário -->\r\n          </div>\r\n          <span\r\n            v-for=\"emoji in emojis\"\r\n            :key=\"emoji.type\"\r\n            :class=\"{ active: userReaction === emoji.type }\"\r\n            @click=\"handleReaction(emoji.type)\"\r\n          >{{ emoji.char }}\r\n          </span>\r\n          <div v-if=\"userReaction && !showReactions\" class=\"user-reaction\">\r\n            {{ convertEmoji(userReaction) }}\r\n          </div>\r\n          <button class=\"comment-button\" @click=\"toggleCommentBox\">Comentar</button>\r\n          <div v-if=\"showCommentBox\" class=\"add-comment\">\r\n            <input type=\"text\" v-model=\"newComment\" placeholder=\"Adicione um comentário...\">\r\n            <button @click=\"postComment\">Enviar</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <button v-if=\"allPhotos.length > 1\" class=\"carousel-control right\" @click=\"nextPhoto\">&gt;</button>\r\n    </div>\r\n    <div v-if=\"currentPhotoComments.length > 0\" class=\"comments-section\">\r\n      <div class=\"comment\" v-for=\"comment in currentPhotoComments\" :key=\"comment._id\">\r\n        <div class=\"comment-user-info\">\r\n          <img :src=\"comment.userPhoto || defaultAvatar\" alt=\"\" class=\"comment-user-picture\">\r\n          <span>{{ comment.userName }}</span>\r\n          <button style=\"border: none;\" v-if=\"comment.userId === utilizador._id\" @click=\"deleteComment(comment._id)\">🗑️</button>\r\n        </div>\r\n        <p>{{ comment.descricao }}</p>\r\n      </div>\r\n    </div>\r\n  </main>\r\n</div>\r\n</template>\r\n<script>\r\nimport axios from 'axios';\r\nimport defaultAvatar from '@/assets/avatar.png'; // Ajuste o caminho se necessário\r\nimport AppHeader from '@/components/AppHeader.vue';\r\n\r\nexport default {\r\n  components: {\r\n    AppHeader\r\n  },\r\n  data() {\r\n    return {\r\n      usuario: null,\r\n      defaultAvatar,\r\n      emojis: [], // adicione esta linha se \"emojis\" for uma lista que você irá iterar\r\n      estadoAmizade: null, \r\n      utilizador: null, // Deve ser atualizado com os dados do usuário logado\r\n      amigos:[],\r\n      allPhotos: [], // Armazena todas as fotos, excluindo as do usuário logado\r\n      currentPhotoIndex: 0, // Índice da foto atual no carrossel\r\n      showReactions: false, // Estado para controlar a visibilidade das reações\r\n      userReaction: null, // Estado para armazenar a reação do usuário para a foto atual\r\n      newComment: '', // Para armazenar o novo comentário digitado pelo usuário\r\n      showCommentBox: false, // novo estado para controlar a exibição da caixa de comentário\r\n      currentPhotoComments: [], // Armazena os comentários da foto atual  \r\n      reactionCounts: {}, // Inicialize como um objeto vazio ou como necessário\r\n    };\r\n  },\r\n  watch: {\r\n  '$route.params.id': {\r\n    immediate: true,\r\n    handler(newId, oldId) {\r\n      if (newId !== oldId) {\r\n        this.fetchUserData();\r\n        this.fetchAllPhotos();\r\n      }\r\n    }\r\n  },\r\n  currentPhotoIndex(newIndex, oldIndex) {\r\n    if (newIndex !== oldIndex) {\r\n      const currentPhoto = this.allPhotos[newIndex];\r\n      if (currentPhoto) {\r\n        this.checkUserReaction(currentPhoto._id);\r\n        this.fetchComments(currentPhoto._id); // Adicionar esta linha\r\n        this.fetchReactionCounts(currentPhoto._id)\r\n      }\r\n    }\r\n  }\r\n},\r\n  methods: {  \r\n    async fetchAmigos() {\r\n      try {\r\n        const response = await axios.get(`/api/amizades/amigos/${this.usuario._id}`, {\r\n          headers: {\r\n            'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n          }\r\n        });\r\n        this.amigos = response.data; // Supondo que a API retorne uma lista de objetos de amigos\r\n      } catch (error) {\r\n        console.error('Erro ao buscar amigos', error);\r\n      }\r\n    },\r\n\r\n    deleteComment(commentId) {\r\n    // Solicita confirmação do usuário\r\n    if (window.confirm(\"Tem certeza que deseja eliminar o comentário?\")) {\r\n      axios.delete(`/api/comentario/${commentId}`, {\r\n        headers: {\r\n          'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n        }\r\n      })\r\n      .then(() => {\r\n        // Se a promessa for resolvida, informar o usuário do sucesso\r\n        alert(\"Comentário eliminado com sucesso!\");\r\n        // Atualizar os comentários exibidos\r\n        this.fetchComments(this.allPhotos[this.currentPhotoIndex]._id);\r\n      })\r\n      .catch(error => {\r\n        console.error('Erro ao excluir comentário', error);\r\n        // Se ocorrer um erro, informar o usuário\r\n        alert(\"Ocorreu um erro ao tentar eliminar o comentário.\");\r\n      });\r\n    }\r\n  },\r\n  fetchComments(fotoId) {\r\n    axios.get(`/api/comentarios/${fotoId}`, {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n      }\r\n    })\r\n    .then(response => {\r\n      this.currentPhotoComments = response.data || [];\r\n    })\r\n    .catch(error => {\r\n      console.error('Erro ao buscar comentários', error);\r\n    });\r\n  },\r\n  postComment() {\r\n    const photoId = this.allPhotos[this.currentPhotoIndex]._id;\r\n    axios.post('/api/comentarios', {\r\n      descricao: this.newComment,\r\n      fotoID: photoId,\r\n      dataCriacao: new Date()\r\n    }, {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n      }\r\n    })\r\n    .then(() => {\r\n      alert('Comentário adicionado com sucesso!'); // Exibe um alerta de sucesso\r\n      this.newComment = ''; // Limpa o campo de comentário\r\n      this.fetchComments(photoId); // Atualiza a lista de comentários\r\n      this.toggleCommentBox(); // Fecha a caixa de comentário após adicionar um novo\r\n    })\r\n    .catch(error => {\r\n      console.error('Erro ao postar comentário', error);\r\n      // Trate aqui o erro, como mostrar uma mensagem para o usuário\r\n    });\r\n  },\r\n  fetchReactionCounts(fotoId) {\r\n  axios.get(`/api/reacoes/contagem/${fotoId}`)\r\n  .then(response => {\r\n    const photoIndex = this.allPhotos.findIndex(photo => photo._id === fotoId);\r\n    if (photoIndex !== -1) {\r\n      // No Vue 3, você pode simplesmente atribuir o valor\r\n      this.allPhotos[photoIndex].reactionCounts = response.data;\r\n      // Certifique-se de que reactionCounts é reativo, definindo-o no estado do componente\r\n    }\r\n  })\r\n  .catch(error => {\r\n    console.error('Erro ao buscar contagens de reações', error);\r\n  });\r\n},\r\n  convertEmoji(tipoEmoji) {\r\n    const emojiMap = {\r\n      like: '👍',\r\n      heart: '❤️',\r\n      laugh: '😂',\r\n      happy: '😊',\r\n      // ...outros mapeamentos\r\n    };\r\n    return emojiMap[tipoEmoji] || tipoEmoji;\r\n  },\r\n  checkUserReaction(fotoId) {\r\n    axios.get(`/api/reacoes/${fotoId}`, {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n      }\r\n    })\r\n    .then(response => {\r\n      if (response.data && response.data.reacao) {\r\n        this.userReaction = response.data.reacao;\r\n      } else {\r\n        this.userReaction = null;\r\n      }\r\n    })\r\n    .catch(error => {\r\n      console.error('Erro ao verificar a reação do usuário', error);\r\n    });\r\n  },\r\n  reagirAFoto(tipoEmoji, fotoID) {\r\n    axios.post('/api/reacoes', {\r\n      tipoEmoji,\r\n      fotoID\r\n    }, {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n      }\r\n    })\r\n    .then(() => {\r\n      // Supondo que você queira armazenar a reação do usuário\r\n      this.userReaction = tipoEmoji;\r\n      // Se você mantiver um registro de todas as reações por foto, você pode atualizar isso também\r\n      let photo = this.allPhotos.find(p => p._id === fotoID);\r\n      if (photo) {\r\n        this.fetchReactionCounts(fotoID);\r\n        if (!photo.reactions) {\r\n          photo.reactions = {};\r\n        }\r\n        // Incrementar o contador de reações para o tipoEmoji\r\n        if (photo.reactions[tipoEmoji]) {\r\n          photo.reactions[tipoEmoji]++;\r\n        } else {\r\n          photo.reactions[tipoEmoji] = 1;\r\n        }\r\n      }\r\n      \r\n      // Atualizar qualquer outro estado ou componentes da interface do usuário conforme necessário\r\n      // Por exemplo, se você tiver um componente de notificação, pode querer mostrar uma mensagem de sucesso\r\n      // this.showNotification('Reação enviada com sucesso!');\r\n\r\n    })\r\n    .catch(error => {\r\n      console.error('Erro ao reagir à foto', error);\r\n      // Tratar erros de interface do usuário, como mostrar uma mensagem de erro\r\n      // this.showNotification('Erro ao enviar reação.');\r\n    });\r\n  },\r\n  toggleReactions() {\r\n    this.showReactions = !this.showReactions;\r\n  },\r\n  toggleCommentBox() {\r\n    this.showCommentBox = !this.showCommentBox;\r\n  },\r\n  handleReaction(reactionType) {\r\n    const photoId = this.allPhotos[this.currentPhotoIndex]._id;\r\n    this.userReaction = reactionType; // Armazena a reação do usuário\r\n    this.reagirAFoto(reactionType, photoId); // Envia a reação para o servidor\r\n    this.showReactions = false; // Esconde a lista de reações\r\n  },\r\n\r\n    getAbsolutePath(relativePath) {\r\n    // Isso garante que o caminho da imagem sempre comece a partir da raiz\r\n    return `${window.location.origin}/${relativePath}`;\r\n  },\r\n    prevPhoto() {\r\n    if (this.currentPhotoIndex === 0) {\r\n      this.currentPhotoIndex = this.allPhotos.length - 1;\r\n    } else {\r\n      this.currentPhotoIndex--;\r\n    }\r\n  },\r\n  nextPhoto() {\r\n    if (this.currentPhotoIndex === this.allPhotos.length - 1) {\r\n      this.currentPhotoIndex = 0;\r\n    } else {\r\n      this.currentPhotoIndex++;\r\n    }\r\n  },\r\n  fetchAllPhotos() {\r\n    const userId = this.$route.params.id;\r\n    axios.get(`/api/fotos/${userId}`, {\r\n      headers: {\r\n        'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n      }\r\n    })\r\n    .then(response => {\r\n    this.allPhotos = response.data;\r\n  })\r\n    .catch(error => {\r\n      console.error('Erro ao recuperar fotos', error);\r\n    });\r\n  },\r\n    fetchUserData() {\r\n    const userId = this.$route.params.id;\r\n\r\n    if (userId) {\r\n      axios.get(`/api/utilizador/${userId}`)\r\n        .then(response => {\r\n          this.usuario = response.data;\r\n          this.verificarEstadoAmizade(response.data._id);\r\n        })\r\n        .catch(error => {\r\n          console.error('Erro ao recuperar os dados do utilizador', error);\r\n        });\r\n    }\r\n  },\r\n  async fetchUserLogado() {\r\n      try {\r\n        const response = await axios.get('/api/me', {\r\n          headers: {\r\n            'Authorization': 'Bearer ' + localStorage.getItem('userToken')\r\n          }\r\n        });\r\n        this.utilizador = response.data;\r\n        return true; // Indica sucesso\r\n      } catch (error) {\r\n        console.error('Erro ao recuperar os dados do usuário', error);\r\n        return false; // Indica falha\r\n      }\r\n    },\r\n    cancelarPedidoAmizade() {\r\n    // Substitua 'amizadeId' pelo ID do documento de amizade que você deseja cancelar.\r\n    // Você pode precisar ajustar a lógica para obter esse ID.\r\n    const amizadeId = this.amizadeId; \r\n\r\n    axios.delete(`/api/amizades/${amizadeId}`)\r\n      .then(() => {\r\n        this.estadoAmizade = 'nenhum';\r\n        this.amizadeId = null; // Adiciona esta linha para resetar o ID\r\n\r\n        // Faça qualquer outra coisa necessária após o cancelamento bem-sucedido.\r\n      })\r\n      .catch(error => {\r\n        console.error('Erro ao cancelar pedido de amizade', error);\r\n        // Trate o erro adequadamente.\r\n      });\r\n  },\r\n  verificarEstadoAmizade(usuarioId) {\r\n    this.$nextTick(() => {\r\n    if (this.utilizador && this.utilizador._id) {\r\n      const userIdLogado = this.utilizador._id;\r\n      axios.get(`/api/amizades/verificar/${userIdLogado}/${usuarioId}`)\r\n        .then(response => {\r\n          this.estadoAmizade = response.data.estado;\r\n          this.amizadeId = response.data.amizadeId;\r\n        })\r\n        .catch(error => {\r\n          console.error('Erro ao verificar estado da amizade', error);\r\n          this.estadoAmizade = 'nenhum';\r\n        });\r\n    }\r\n  });\r\n  },\r\n\r\n   enviarPedidoAmizade() {\r\n    const userIdLogado = this.utilizador._id // Obtenha o ID do usuário logado\r\n    const usuarioId = this.usuario._id; // ID do usuário visualizado\r\n\r\n  axios.post('/api/amizades', {\r\n    idutilizador1: userIdLogado,\r\n    idutilizador2: usuarioId,\r\n    dataAmizade: new Date(),\r\n    estado: 'pendente'\r\n  })\r\n  .then(response => {\r\n    this.estadoAmizade = 'pendente';\r\n    this.amizadeId = response.data._id; // Armazena o novo ID da amizade\r\n\r\n  })\r\n  .catch(error => {\r\n    console.error('Erro ao enviar pedido de amizade', error);\r\n  });\r\n},\r\n    navigateTo(path) {\r\n    this.$router.push(path);\r\n  },\r\n  openUserProfile(user) {\r\n    this.$router.push({ name: 'PaginaUtilizador', params: { id: user._id } });\r\n  },\r\n\r\n},\r\nasync created() {\r\n  if (await this.fetchUserLogado()) { // Espera e verifica se foi bem-sucedido\r\n    this.fetchUserData();\r\n    this.fetchAllPhotos(); // Adicione esta linha para buscar todas as fotos\r\n    this.fetchAmigos();\r\n  if (this.allPhotos.length > 0) {\r\n      this.checkUserReaction(this.allPhotos[this.currentPhotoIndex]._id);\r\n  }\r\n  if (this.allPhotos.length > 0) {\r\n      this.fetchReactionCounts(this.allPhotos[this.currentPhotoIndex]._id);\r\n  }\r\n  } else {\r\n    console.error('Erro: Utilizador logado ainda não definido após fetchUserLogado.');\r\n  }\r\n},\r\n  \r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.app-header {\r\n    position: fixed;\r\n    top: 0;\r\n    left:0;\r\n    width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0 2rem;\r\n  background-color: #ffffff; /* ou qualquer outra cor de fundo que você preferir */\r\n  padding-top: 20px;\r\n  padding-bottom: 20px;\r\n    z-index: 1030; /* Um z-index típico para cabeçalhos fixos, assegura que fica acima dos outros elementos */\r\n\r\n}\r\n.logo-container {\r\n  /* Se precisar, adicione estilos específicos aqui */\r\n}\r\n\r\n.logo {\r\n  height: 50px; /* Ajuste conforme o tamanho desejado para o seu logo */\r\n}\r\n\r\n.search-container {\r\n  /* Estilos para a barra de busca */\r\n}\r\n\r\n.search-input {\r\n  padding: 0.5rem;\r\n  border: 1px solid #ccc;\r\n  border-radius: 20px;\r\n}\r\n\r\n.nav-icons {\r\n  display: flex;\r\n  gap: 7rem; /* Aumenta o espaço entre os ícones */\r\n}\r\n\r\n.icon-link img {\r\n  height: 40px; /* Aumenta o tamanho dos ícones */\r\n  width: auto; /* Mantém a proporção dos ícones */\r\n}\r\n.app-container {\r\n    padding-top: 85px;\r\n  display: flex;\r\n  width: 100%; /* Ocupa 100% da largura da tela */\r\n  margin-top: 10px; /* Deve ser igual à altura do seu cabeçalho */\r\n  background-color: #f0f0f0; /* Cor de fundo cinza */\r\n}\r\n.container {\r\n  width: 100%; /* Ocupa 100% da largura da tela */\r\n  height: 100vh; /* Ocupa 100% da altura da viewport */\r\n  background-color: #f0f0f0; /* Cor de fundo cinza */\r\n  margin: 0; /* Remove margens padrão */\r\n  padding: 0; /* Remove preenchimentos padrão */\r\n  display: flex; /* Permite o uso de flexbox para alinhamento interno */\r\n  justify-content: center; /* Centraliza o conteúdo horizontalmente */\r\n  align-items: center; /* Centraliza o conteúdo verticalmente */\r\n}\r\n\r\n.sidebar {\r\n  position: sticky;\r\n    top: 60px;\r\n  width: 20%;\r\n  background-color: #d9d9d9; /* Cor de fundo para a barra lateral */\r\n  padding: 20px;\r\n  padding-top: 30px;\r\n  height: calc(110vh - 60px);\r\n  overflow-y: auto;\r\n  box-sizing: border-box; /* Inclui padding na largura total */\r\n}\r\n\r\n.profile-section {\r\n  text-align: center;\r\n  /* ... outros estilos ... */\r\n}\r\n\r\n.profile-picture {\r\n  width: 80px;\r\n  height: 80px;\r\n  border-radius: 50%;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.add-friend-section {\r\n  text-align: center;\r\n  padding: 20px;\r\n}\r\n\r\n.add-friend-button {\r\n  width: 100%;\r\n  padding: 10px;\r\n  background-color: #5cb85c;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.add-friend-button:hover {\r\n  background-color: #4cae4c;\r\n}\r\n\r\n.friends-list {\r\n  list-style-type: none;\r\n  padding: 0;\r\n}\r\n\r\n.friends-list li {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.friend-picture {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  margin-right: 10px;\r\n}\r\n\r\n.content {\r\n  flex-grow: 1; /* Ocupa o espaço restante */\r\n  display: flex;\r\n  flex-direction: column; /* Empilha os cartões verticalmente */\r\n  align-items: center; /* Centraliza os cartões horizontalmente */\r\n  padding: 20px;\r\n  overflow-y: auto; /* Adiciona barra de rolagem se necessário */\r\n}\r\n\r\n.photo-card {\r\n  width: calc(80% - 40px); /* 80% da largura do content menos o padding */\r\n  margin-bottom: 20px; /* Espaçamento entre os cartões de foto */\r\n  /* ... outros estilos para o photo-card ... */\r\n}\r\n\r\n.photo {\r\n  width: 100%; /* Faz a imagem ocupar todo o cartão */\r\n  height: auto; /* Mantém a proporção da imagem */\r\n  border-radius: 10px; /* Arredonda os cantos da imagem */\r\n}\r\n\r\n.search-results {\r\n  position: absolute;\r\n  top: 100%;\r\n  left: 0;\r\n  width: 100%;\r\n  background-color: #fff;\r\n  box-shadow: 0 4px 6px rgba(0,0,0,0.1);\r\n  z-index: 10;\r\n}\r\n\r\n.user-result {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 10px;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.user-photo {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  margin-right: 10px;\r\n}\r\n\r\n.carousel-control {\r\n  background: none;\r\n  border: none;\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translateY(-50%);\r\n  cursor: pointer;\r\n  font-size: 24px;\r\n  color: #333;\r\n}\r\n\r\n.carousel-control.left {\r\n  left: -50px;\r\n}\r\n\r\n.carousel-control.right {\r\n  right: -50px;\r\n}\r\n\r\n.photo {\r\n  display: block;\r\n  max-width: 100%;\r\n  height: auto;\r\n}\r\n\r\n.photo-container {\r\n  display: flex;\r\n  flex-direction: column; /* Empilha os elementos verticalmente */\r\n  align-items: center; /* Centraliza os elementos horizontalmente */\r\n  max-width: 400px; /* ou a largura que desejar */\r\n}\r\n\r\n.photo-description {\r\n  text-align: center;\r\n  margin-top: 10px; /* Ajuste o espaçamento conforme necessário */\r\n  font-style: italic;\r\n  color: #666; /* Cor cinza para a descrição */\r\n  width: 100%; /* Isso fará com que a descrição se estenda por toda a largura do contêiner */\r\n}\r\n\r\n.carousel-container {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  position: relative;\r\n}\r\n\r\n.user-info {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.user-profile-picture {\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n  margin-right: 10px;\r\n}\r\n\r\n.photo-actions {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin-top: 10px;\r\n}\r\n\r\n.reaction-button, .comment-button {\r\n  padding: 5px 10px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  cursor: pointer;\r\n  /* Adicione cores e estilos adicionais conforme necessário */\r\n}\r\n\r\n.reaction-button:hover, .comment-button:hover {\r\n  /* Estilos para o estado de hover */\r\n}\r\n\r\n.reactions-list {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 10px;\r\n}\r\n\r\n.reactions-list span {\r\n  font-size: 24px;\r\n  margin: 0 5px;\r\n  cursor: pointer;\r\n}\r\n\r\n.reactions-list span.active {\r\n  border: 2px solid blue; /* Estilo para destacar a reação ativa */\r\n}\r\ninput[type=\"text\"],\r\ninput[type=\"checkbox\"] {\r\n  /* Estilos dos inputs */\r\n}\r\n.user-reaction{\r\n    font-size: x-large;\r\n}\r\n\r\n\r\n.add-comment {\r\n  display: flex;\r\n  margin-top: 10px;\r\n}\r\n\r\n.add-comment input[type=\"text\"] {\r\n  padding: 8px;\r\n  margin: 5px;\r\n  border: 1px solid #ccc;\r\n  border-radius: 4px;\r\n}\r\n\r\n.add-comment button {\r\n  padding: 6px 12px;\r\n  background-color: #4CAF50;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n}\r\n\r\n.comments-section {\r\n  margin-top: 20px;\r\n}\r\n\r\n.comment {\r\n  border-top: 1px solid #ccc;\r\n  padding: 10px;\r\n}\r\n\r\n.comment-user-info {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.comment-user-picture {\r\n  width: 30px;\r\n  height: 30px;\r\n  border-radius: 50%;\r\n  margin-right: 10px;\r\n} \r\n.reaction-counts span {\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  background-color: #ffffff;\r\n  border: 1px solid #ddd;\r\n  border-radius: 20px;\r\n  padding: 5px 10px;\r\n  margin: 5px;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n}\r\n\r\n.reaction-counts span:before {\r\n  content: '';\r\n  display: inline-block;\r\n  margin-right: 5px;\r\n}\r\n/* Estilos para os botões e inputs */\r\nbutton {\r\n  /* Estilos do botão */\r\n}\r\n\r\ninput[type=\"text\"],\r\ninput[type=\"checkbox\"] {\r\n  /* Estilos dos inputs */\r\n}\r\n\r\n/* Responsividade */\r\n@media (max-width: 768px) {\r\n  .app-container {\r\n    flex-direction: column;\r\n  }\r\n  \r\n  .sidebar,\r\n  .content {\r\n    width: 100%;\r\n    padding: 0;\r\n    margin-top: 0;\r\n  }\r\n}\r\n</style>\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}